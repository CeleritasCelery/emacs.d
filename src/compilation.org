#+TITLE: Emacs Literate Configuration for compilation
#+AUTHOR: Troy Hinckley
#+PROPERTY: header-args :tangle yes

* compilation
packages that assist in compiling and building code

use lexical bindings in the file make this file lexically bound
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- personal emacs config file -*- lexical-binding: t -*-
#+END_SRC

** compile
#+BEGIN_SRC emacs-lisp
  (defun $compile (arg)
    "compile with hdk enviroment sourced"
    (interactive "P")
    (let* ((root (vc-git-root default-directory))
           (model-root (or (file-truename root) "no-model"))
           (compilation-environment (list (concat "MODEL_ROOT=" model-root)))
           (compilation-buffer-name-function
            (lambda (_mode)
              (cl-loop for i from 0 to 10
                       for buf-name = (format "*%s compile-%d*"
                                              (f-filename model-root)
                                              i)
                       for buf = (get-buffer buf-name)
                       until (or (null buf)
                                 (not (get-buffer-process buf)))
                       finally return buf-name))))
      (compilation-start (concat "source /p/hdk/rtl/hdk.rc -cfg shdk74 && " (read-string "Compile Command: " nil 'compile-history))
                         (when arg
                           (intern-soft (read-string "set mode: "))))))
#+END_SRC


compilation mode will throw warnings about clearing large buffers, but
we don't need undo in compilation buffers anyways so we can just turn
that off
#+BEGIN_SRC emacs-lisp
  (add-hook 'compilation-mode-hook 'buffer-disable-undo)
#+END_SRC

** windows
Don't pop windows for compilation buffers
#+BEGIN_SRC emacs-lisp
  (defun $compile-no-display-buffer (fn &rest args)
    (cl-letf (((symbol-function 'display-buffer) (lambda (&rest args))))
      (apply fn args)))

  (advice-add 'compilation-start :around '$compile-no-display-buffer)
#+END_SRC

** keybindings
compillation can either be run in =compilation-mode= or in
=comint-mode= with =compilation-shell-minor-mode= enabled. The later
is needed when we want to interact with the running process. This has
a few issues that we are going to resolve now:

1. There is a weird issue where the recompile buffer is not the same
   as the original buffer. Therefore we force the buffer name to
   remain the same by overriding the =compilation-arguments=.

2. It is really convient to dismiss the compilation window with =q= so
   we are going to bind that. regular compilation-mode supports this
   binding by default.

3. We want to start in normal state, so we easily dismiss the
   window with =q= right when it first pops up if we want.
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :definer 'minor-mode
   :states 'normal
   :keymaps 'compilation-shell-minor-mode
   "q" 'quit-window
   "gr" 'recompile
   "gf" '$find-file-at-point
   "C-j" 'compilation-next-error
   "C-k" 'compilation-previous-error)
  (general-define-key
   :states 'normal
   :keymaps 'compilation-minor-mode-map
   "C-j" 'compilation-next-error
   "C-k" 'compilation-previous-error)
  (general-define-key
   :states 'normal
   :keymaps 'compilation-mode-map
   "gf" '$find-file-at-point)

  (advice-add 'recompile :before (defun $set-recompile-buffer-name (_)
                                   (setf (nth 2 compilation-arguments) (lambda (_) (buffer-name)))))

  (add-hook 'compilation-shell-minor-mode-hook 'evil-normal-state)
#+END_SRC

** ansi-color
Emacs can interpret ansi escape codes as font lock

#+BEGIN_SRC emacs-lisp
  (defun $apply-ansi-color-on-buffer ()
    "apply ANSI color codes in this buffer"
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC

** errors
Define some custom rx forms that are common to all error messages
#+BEGIN_SRC emacs-lisp
  (define-arx err-rx
    (append $rx-defaults
            '((fill (1+ (not (any space))))
              (filename (group-n 1 file))
              (line (group-n 2 nums))
              (col (group-n 3 nums))
              (info (opt "-I-:")))))
#+END_SRC

we need to define what errors look like in compilation and log
files. compilation mode has some defaults but they are not really
applicable to us. Also the built-in verilog mode tries to add all of
its error regexp's to the alist everytime it is loaded. This results
in a lot of extra processing that we don't want. Therefore we remove
that hook and set the alist back to our canonical version.
#+BEGIN_SRC emacs-lisp
  (defvar $compilation-error-regexp-alist nil
    "The canonical error regexp alist")

  (defun $prev-declaration-file ()
    (save-excursion
      (forward-line 2)
      (forward-char)
      (thread-last (thing-at-point 'line)
        (string-remove-prefix "  \"")
        (string-remove-suffix "\",\n"))))

  (defun $find-par-file ()
    (let* ((log (buffer-file-name))
           (root (vc-git-root log))
           (model (and (string-match (rx "collage_assemble_"
                                         (group (1+ any))
                                         "_collage_assemble")
                                     log)
                       (match-string 1 log))))
      (format "%stools/collage/integ_specs/%s_soc_par.txt" root model)))

  (defun $follow-connection-file ()
    (let* ((file (match-string 1))
           (buffer (find-file-noselect file 'nowarm 'raw)))
      (prog1 (with-current-buffer buffer
               (save-match-data
                 (if (re-search-forward (err-rx bol "##Source File: " filename))
                     (match-string 1)
                   file)))
        (kill-buffer buffer))))

  (defun $correct-connection-line-number ()
    "adjust line numbers for connection files"
    (let ((file-name (buffer-file-name)))
      (when (string-match-p (rx (or "adhoc" "std") "_connection") file-name)
        (forward-line -1)
        (evil-set-jump))))

  (add-hook 'next-error-hook '$correct-connection-line-number)

  (setq compilation-error-regexp-alist
        (setq $compilation-error-regexp-alist
              `((,(err-rx ^ "-I-:Error-" ->
                          "\n-I-:" filename ", " line)
                 1 2)
                (,(err-rx ^ "-E-:SGDFT" -> "FAILED"
                          "\n-I-:  Error" ->
                          "\n-I-:  Use" ->
                          "\n-I-:Report: " filename)
                 1)
                (,(err-rx ^ spc+ "simregress invocation failed on " ->
                          "\n" spc+ "Refer to " -> ": " filename)
                 1)
                (,(err-rx ^ "Error-[" (group-n 3 ->) "]" ->
                          "\n" filename ", " line)
                 1 2 nil nil nil (3 'warning))
                (,(err-rx ^ "-E-:FAILED: emubuild" -> "REASON : failed LOG :  "
                          filename)
                 1)
                (,(err-rx ^ "  Log: " filename)
                 1 nil nil 1)
                (,(err-rx ^ "UPFSEM_4" spc+ (1+ word) spc+
                          filename spc+ line)
                 1 2)
                (,(err-rx ^ "Errormessage   : Failed to open input file ["
                          filename "]")
                 1)
                (,(err-rx ^ info "  Error occurred at File: " filename " Line: " line)
                 1 2)
                (,(err-rx ^ "-I-:-E-:" symbol ": invalid HSD waiver: " -> " file '" filename "'")
                 1)
                (,(err-rx ^ line ": " (or "OVM_ERROR" "OVM_FATAL") " ")
                 (0 "acerun.log.gz") 2)
                (,(err-rx ^ line ": Error: \"")
                 (0 "acerun.log.gz") 2)
                (,(err-rx ^ (or "OVM_ERROR" "OVM_FATAL") " " filename ":" line " @ ")
                 1 2)
                (,(err-rx ^ "-I-:ERROR: " symbol " has " nums " upf error" (opt "s")
                          "\n-I-:Check: " filename)
                 1)
                (,(err-rx ^ "-I-:Detailed violation log for sgdft_drc for " symbol ": " filename)
                 1)
                (,(err-rx ^ "-E-:Error in stage bman." symbol ".vclp." symbol ":"
                          "\n-I-:***** Cat'ing logs *****"
                          "\n-I-:Executing: cat " filename)
                 1)
                (,(err-rx ^ "-I-:" (opt "DIE signal:") " ERROR " nums ": Couldn't find directory '" filename "'")
                 1)
                (,(err-rx ^ "-F-:Failing test in " filename)
                 1)
                (,(err-rx ^ "-I-:FAILED: Exit status of pid " nums " was '" nums "', user expected '0'; LOG " filename)
                 1)
                ;; this used to be in ipgen, may need to be in both
                (,(err-rx ^ "Information: script '" filename
                          "'\n" spc+ "stopped at line " line ->)
                 1 2)
                (,(err-rx ^ "Could not open file No such file or directory at " filename " line " line)
                 1 2)
                (,(err-rx ^ (or "-F-: [CRT-023]" "Error:") " Error in conncection file " (or "adhoc" "std") " connection file " filename
                          " \n Error at line# " line)
                 $follow-connection-file 2)
                (,(err-rx ^ "ERROR: couldn't parse " filename ":")
                 1)
                (,(err-rx ^ "FATAL                (F) Exception caught: " (1+ nonl) " at " filename " line " line)
                 1 2)
                (,(err-rx ^ "//  Error: File: " filename ", Line: " line ": " (1+ nonl))
                 1 2)
                (,(err-rx ^ filename ":" line ": [Error]" (1+ nonl))
                 1 2)
                (,(err-rx ^ "Failed Logs:"
                          "\n\t" filename)
                 1)
                (,(err-rx ^ "-E- Can't add parameter '" symbol "' because it already exists at " filename " line " line)
                 1 2)
                (,(err-rx ^ "Error-[MPD] Module previously declare" (group-n 1 nonl))
                 $prev-declaration-file)
                (,(err-rx ^ "    FileName     : " filename
                          "\n    LineNumber   : " line)
                 1 2)
                (,(err-rx ^ "syntax error at " filename " line " line)
                 1 2)
                (,(err-rx ^ "Error-[SFCOR] Source file cannot be opened"
                          "\n  Source file \"" filename "\"")
                 1)
                (,(err-rx ^ "ERROR: Corekit instances not assigned to partition.  Please add these instances to " filename)
                 $find-par-file)
                (,(err-rx ^ "-E- Lintra [1051] " filename "(" line ")" -> ":" (group-n 3 ->) ":")
                 1 2 nil nil nil (3 'warning))
                (,(err-rx ^ "-" (or "E" "I") "-:" (opt spc) "FAILED:" -> (or ";" ":") " LOG " (opt ": ") filename)
                 $bman-skip-intermediate-log)
                (,(err-rx ^ "ERROR: In file '" filename "':")
                 1)
                (,(err-rx ^ "-E-:FAILED" spc+ fp spc+ fp "  " filename)
                 $bman-find-generic-log))))

  (with-eval-after-load 'verilog-mode
    (remove-hook 'compilation-mode-hook 'verilog-error-regexp-add-emacs)
    (setq compilation-error-regexp-alist $compilation-error-regexp-alist))
#+END_SRC

*** font lock fix
There is any issue where an error message spans multiple lines, the
font lock engine will sometimes stop parsing in the middle of it and
therefore it will never get highlighted. We fix this by creating our
own =font-lock-extend-region= function that makes sure we do not stop
on error messages.
#+BEGIN_SRC emacs-lisp
  (defun $font-lock-extend-region-error-message ()
    (defvar font-lock-end)
    (save-excursion
      (goto-char font-lock-end)
      (beginning-of-line)
      (when (looking-at-p (rx (opt "-I-:")
                              (or "Error: "
                                  " Error"
                                  "Error-"
                                  "Errormessage"
                                  "-E-:"
                                  "-F-:"
                                  "Information:")))
        (forward-line 2)
        (setq font-lock-end (point)))))
  (byte-compile '$font-lock-extend-region-error-message)

  (general-add-hook '(compilation-mode-hook
                      compilation-minor-mode-hook
                      compilation-shell-minor-mode-hook)
                    (defun $set-font-lock-error-function ()
                      (add-hook 'font-lock-extend-region-functions
                                '$font-lock-extend-region-error-message
                                'append
                                'local)))
#+END_SRC

** functions
functions that are used for compilation of ipgen and bman or turnin.

*** ipgen

all the errors I have encountered in IPGen
#+BEGIN_SRC emacs-lisp
  (defun $find-ult-log ()
    (concat "collage_work/ultiscan/logs/" (match-string 1) ".log"))

  (defun $golden-file-log ()
    (save-excursion
      (forward-line -2)
      (beginning-of-line)
      (when (re-search-forward (err-rx ^ "\tLoading log: " filename) (line-end-position) t)
        (match-string 1))))

  (defvar ipgen-error-regexp-alist
    `((,(err-rx ^ info "-" (or "E" "F") "-: [CRT-" nums "] Error in conncection file "
                -> " file " filename spc*
                "\n" info " Error at line# " line)
       1 2)
      (,(err-rx ^ "-I-:Error-[MPD] Module previously declared"
                "\n-I-:  The module was previously declared at: "
                "\n-I-:  \"" (group fill) "/" fill (or ".vs" ".sv") "\",")
       (1 "%s/dft_ipgen.hdl"))
      (,(err-rx ^ "-E- Unable to parse JSON file " filename ":"
                -> "line " line
                " offset " col)
       1 2 3)
      (,(err-rx ^ "Information: script '" filename "'"
                "\n\tstopped at line " line " due to error. " (1+ nonl))
       1 2)
      (,(err-rx ^ "gmake" (opt "[" num "]") ": *** [" filename "] Error " nums)
       (1 "%s.run" "collage_work/ultiscan/logs/%s.log"))
      (,(err-rx ^ "-E- Golden FLS failing partitions: "
                "\n    " filename)
       $golden-file-log))
    "errors seen while running ipgen")
#+END_SRC

ipgen will some times pull up a coreassembler prompt when it fails.
this can lead to a test being suck for a long time without alerting
the user. So we check for the CoreAssembler prompt and alert the user
if that is the case. We also add the buffer to a list of stalled runs
so that status is acurate when we list all compilations.
#+BEGIN_SRC emacs-lisp
  (defvar $compilation-stalled-buffers nil
    "buffers that have a stalled compilation")

  (defun $alert-core-assembler-stall ()
    (when (looking-back (rx bol "CoreAssembler> ") (line-beginning-position))
      (add-to-list '$compilation-stalled-buffers (current-buffer))
      (alert "Core Assembler stall"
             :severity 'moderate)))
  (byte-compile #'$alert-core-assembler-stall)

  (defun $compilation-apply-ansi-color ()
    (defvar compilation-filter-start)
    (ansi-color-apply-on-region compilation-filter-start (point)))
  (byte-compile #'$compilation-apply-ansi-color)

  (defun $compilation-remove-stalled-buffer (buffer _exit)
    (setq $compilation-stalled-buffers (delete buffer $compilation-stalled-buffers)))

  (define-compilation-mode ipgen-mode "ipgen"
    "compilation mode for running IPGen tool"
    (general-add-hook 'compilation-filter-hook '($alert-core-assembler-stall $compilation-apply-ansi-color) nil 'local)
    (general-add-hook 'compilation-finish-functions #'$compilation-remove-stalled-buffer nil 'local))
#+END_SRC

we use helm as the dispatcher for ipgen because it allows to operate
on multiple candidates at once. This lets us run for all models or
only the models we choose.
#+BEGIN_SRC emacs-lisp
  (defun $run-ipgen-internal (dir &optional no-clean)
    (let* ((default-directory dir)
           (model-root (vc-git-root dir))
           (compilation-environment (list "PATH=/usr/intel/bin:/usr/bin:/usr/sbin:/bin"
                                          "TAP_MARSHAL"
                                          "TAP2STF_MAP_FILE"
                                          "XWEAVE"
                                          "XWEAVE_REPO_ROOT"
                                          "TAP_SPFSPEC"
                                          "STF_SPFSPEC"
                                          "STF_MARSHAL"))
           (compilation-buffer-name-function
            (defun $ipgen-buffer-name-fn (mode)
              (format "*%s %s %s*"
                      (f-filename model-root)
                      (downcase mode)
                      (f-filename dir)))))
      ($compilation-start (concat "source setup && "
                                  (unless no-clean "$DFT_REPO_ROOT/DFTNetworkGen/run_dft_ipgen clean && ")
                                  "$DFT_REPO_ROOT/DFTNetworkGen/run_dft_ipgen"
                                  (let ((hack-file "scripts/post_ipgen_hacks.bash") )
                                    (when (file-exists-p (expand-file-name hack-file model-root))
                                      (format " && $MODEL_ROOT/%s" hack-file))))
                          'ipgen-mode)))

  (defun $helm-get-ipgen-data ()
    (let* ((model-root (vc-git-root default-directory))
           (ipgen (f-join model-root "tools/ipgen/"))
           (duts (f--directories ipgen (let ((setup (f-join it "setup")))
                                         (and (file-exists-p setup)
                                              (not (file-symlink-p setup)))))))
      (--map (cons (f-filename it) it) duts)))

  (defun $helm-ipgen-action (_)
    (--each (helm-marked-candidates) ($run-ipgen-internal it helm-current-prefix-arg)))

  (defun $run-ipgen ()
    "run dft ipgen in the current model"
    (interactive)
    (helm
     :buffer "*Run IPGen*"
     :sources (helm-build-sync-source
                  "select ipgen models: "
                :fuzzy-match t
                :candidates ($helm-get-ipgen-data)
                :action '(("run ipgen (C-u to run without clean)" . $helm-ipgen-action)))))
#+END_SRC

*** bman
run the bman command based on a dispatcher. At some point I would like
to make this dynamic so that it could detect all stages and detect
what models can be run. For now I have a "generic" stage that lets me
run any command
#+BEGIN_SRC emacs-lisp
  (defhydra bman-cmd (:exit t :columns 2)
    "run a bman command"
    ("a" ($run-bman "") "all")
    ("A" ($run-bman "+s sgcdc") "extra")
    ("l" ($run-bman "-s all +s lintra") "lintra")
    ("v" ($run-bman "-s all +s vcs") "vcs")
    ("e" ($run-bman "-s all +s espfmodel") "espf")
    ("c" ($run-bman "-s all +s collage") "collage")
    ("s" ($run-bman "-s all +s sgdft") "SG DFT")
    ("d" ($run-bman "-s all +s sgcdc") "SG CDC")
    ("r" ($run-bman "-s emu,sgdft,sglp,vclp,lintra_ol,FLG,hip_listgen,lintra") "RTL only")
    ("u" ($run-bman "-s all +s emu,sglp,sgdft,vclp,lintra_ol,FLG,hip_listgen,lintra,sgcdc") "DRC only")
    ("g" ($run-bman (read-string "run bman as: " (car $bman-command-history) '$bman-command-history)) "generic"))

  (defvar $bman-command-history nil)
#+END_SRC

there are very few errors that show up in bman, but we need a special
handler function to find the right log as the full path is not
availible
#+BEGIN_SRC emacs-lisp
  (defun $bman-find-generic-log ()
    ($bman-skip-intermediate-log
     (car (or (file-expand-wildcards (format "target/log/*.%s.log"
                                             (match-string-no-properties 1)))
              (file-expand-wildcards (format "log/*.%s.log"
                                             (match-string-no-properties 1)))))))

  (cl-defun $bman-skip-intermediate-log (&optional (file (match-string 1)))
    (let ((line (shell-command-to-string
                 (concat "egrep -m1 '^(-F-:Failing test in |-I-:FAILED: Exit status of pid)' " file))))
      (save-match-data
        (if (string-match (err-rx (or "test in " "; LOG ") filename) line)
            (match-string 1 line)
          file))))

  (defvar bman-error-regexp-alist
    `((,(err-rx ^ "-" (or "E" "I") "-:" (opt spc) "FAILED:" -> (or ";" ":") " LOG " (opt ": ") filename)
       $bman-skip-intermediate-log)
      (,(err-rx ^ "-E-:FAILED" spc+ fp spc+ fp "  " filename)
       $bman-find-generic-log)
      (,(err-rx ^ "-I-:DIE signal: " (1+ nonl) " (in " filename ")")
       1)
      (,(err-rx ^ "-I-:DIE signal: \n-I-:" (1+ nonl) " at " filename))
      (,(err-rx ^ "-I-:DIE signal: ERROR: Couldn't find file '" filename "' on path:")
       1)
      (,(err-rx ^ "-E-: FAILED: " fill " : LOG : (Missing) " filename) 1))
    "Regex for errors encountered in bman runs")
#+END_SRC

use these function to get the cluster and therefore the model needed. At
some point I would like to make this automatic by inspection.
#+BEGIN_SRC emacs-lisp
  (defun $get-model-arguments ()
    "get the command line arguments for the model portion of this build"
    (let ((model (alist-get ($git-command "config intel.cluster") $model-cluster-alist nil nil 'equal)))
      (if (listp model)
          (format " -dut %s -mc %s " (first model) (second model))
        (format " -dut %s " model))))

  (defun $model-root (&optional dir)
    "current model root"
    (file-truename (vc-git-root (or dir default-directory))))

  (cl-defun $temp-link-git-worktree (&optional (time 2))
    "create a temporary link to the parent repo of the git worktree
  so that we can get the right cluster and qslot"
    (let ((link-script "~/scripts/git-worktree-temp-link.bash"))
      (when (and (or (file-symlink-p ".git")
                     (file-regular-p ".git"))
                 (file-exists-p link-script))
        (message "%s" (shell-command-to-string (format "%s %d" link-script time))))))

  (defun $gatekeeper-env ()
    `("GK_EVENTTYPE=mock"
      ,(concat "GIT_TOOL_FLOW=" ($git-command "config intel.toolflow"))
      ,(concat "GK_CLUSTER=" ($git-command "config intel.cluster"))
      ,(concat "GK_STEP=" ($git-command "config intel.stepping"))
      ,(concat "GK_BRANCH=" (file-name-base ($git-command "symbolic-ref refs/remotes/origin/HEAD")))))
#+END_SRC

define a custom compliation mode that is run based on the hydra above
#+BEGIN_SRC emacs-lisp
  (define-compilation-mode bman-mode "bman"
    "compilation mode for bman runs")

  (defun $run-bman (filter)
    "run dft ipgen in the current model"
    (let* ((model-root ($model-root))
           (compilation-environment
            (cons (concat "MODEL_ROOT=" model-root)
                  ($gatekeeper-env)))
           (default-directory model-root)
           (name-fn
            (lambda (_mode)
              (format "*%s bman*"
                      (f-filename model-root))))
           (cmd (if (equal "bman" (car (split-string filter)))
                    filter
                  (concat "bman" ($get-model-arguments) filter))))
      ($compilation-start (concat "source /p/hdk/rtl/hdk.rc -cfg shdk74 && " cmd)
                          'bman-mode
                          name-fn)))

  (defun bman-run-clean-maybe (_proc)
    "Run bman clean unless we are running specific stages"
    (let ((cmd (car compilation-arguments)))
      (when (and (string-match-p ($get-model-arguments) cmd)
                 (not (string-match-p "-s all" cmd)))
        ($async-delete-file "target" nil 'no-prompt))))

  (add-hook 'bman-mode-hook
            (defun bman-setup ()
              (add-hook 'compilation-start-hook 'bman-run-clean-maybe nil 'local)))
#+END_SRC

*** simregress
custom compilation command for running regressions
#+BEGIN_SRC emacs-lisp
  (define-compilation-mode simregress-mode "simregress"
    "compilation mode for regressions")

  (defun $run-simregress ()
    "run simgress command for specified list"
    (interactive)
    (let* ((model-root ($model-root))
           (reg-dir (f-join ($model-root) "verif/reglist/"))
           (file (completing-read
                  "Select test list: "
                  (cons "other..."
                        (seq-sort-by 'length '<
                                     (mapcar (lambda (x) (string-remove-prefix reg-dir x))
                                             (directory-files-recursively reg-dir
                                                                          (rx ".list" eos)))))))
           (test-list (cond ((equal file "other...") (read-file-name "Select test list: "))
                            ((file-exists-p file) file)
                            ((stringp file) (f-join reg-dir file))
                            (t (user-error "invalid file name %s" file))))
           (fsdb (if (y-or-n-p "With waves? ") "-trex -fsdb -trex-" ""))
           (default-directory model-root)
           (compilation-environment (cons (concat "MODEL_ROOT=" model-root)
                                          ($gatekeeper-env)))
           (compilation-buffer-name-function
            (lambda (mode)
              (format "*%s simregress %s*"
                      (f-filename model-root)
                      (f-filename test-list)))))
      ($compilation-start (format "source /p/hdk/rtl/hdk.rc -cfg shdk74 && simregress -net %s -l %s -C 'SLES11SP4&&20G' -save %s"
                                  ($get-model-arguments) test-list fsdb)
                          'simregress-mode)))
#+END_SRC

*** consume IP
#+BEGIN_SRC emacs-lisp
  (define-compilation-mode consume-ip-mode "consumeIP"
    "compilation mode comsume IP")

  (defun $build-consume-ip-command (ip stages)
    (let ((workarea (concat "../ip_uprev_workarea/" (f-filename ($model-root)))))
      (make-directory workarea t)
      (mapconcat
       (lambda (x)
         (string-join
          (list "source /p/hdk/rtl/hdk.rc -cfg shdk74 && $RTL_PROJ_DBIN/ip_packaging/consume_ip.pl"
                "-consumer" ($git-command "config intel.cluster")
                "-ip_file uprev.csv"
                "-ip" (car (split-string ip ","))
                "-workarea" workarea
                (pcase x
                  ("clone" "")
                  ("uniquify" "-uniquify")
                  ("build" "-build")
                  ("commit" "-commit")
                  ("release" "-release")))
          " "))
       stages
       " && ")))

  (defun $run-consume-ip ()
    (interactive)
    (let* ((model-root ($model-root))
           (default-directory model-root)
           (compilation-environment (list (concat "MODEL_ROOT=" model-root)))
           (uprev (with-temp-buffer
                    (insert-file-contents (expand-file-name "uprev.csv" model-root))
                    (cl-remove-if (lambda (x)
                                    (string-match-p (rx bos "#") x))
                                  (split-string (buffer-string) "\n"))))
           ips stages)
      ;; change this to use transient instead
      (ivy-read "Uprev IPs: " uprev :action (lambda (x &optional all) (setq ips (or all (list x)))))
      (ivy-read "select stages: " '(clone uniquify build commit release)
                :action (lambda (x &optional all) (setq stages (or all (list x)))))
      (cl-loop for ip in ips
               do ($compilation-start ($build-consume-ip-command ip stages)
                                      'consume-ip-mode
                                      (lambda (mode)
                                        (format "*%s consume ip %s*"
                                                (f-filename model-root)
                                                (car (split-string ip ","))))))))
#+END_SRC

*** turnin
run a turnin command
#+BEGIN_SRC emacs-lisp
  (defun $find-latest-gk-log ()
    "this will stop working in the year 3000. Built-in
  obsolescence"
    (first (sort (file-expand-wildcards "GATEKEEPER/turnin.2*.log") 'string>)))

  (defvar turnin-error-regexp-alist
    `((,(err-rx ^ "  Turnin privileges denied on the following files:\n" spc+ filename)
       1)
      (,(err-rx ^ "%E-pre_turnin_script: Command Failed (Exit = " nums "):")
       $find-latest-gk-log)
      (,(err-rx ^ "%E-toolconfig_qc.pl:    ERROR:" (1+ nonl) " at " filename " line " line)
       1))
    "Regex for errors encountered during turnin")
#+END_SRC

a custom compilation command for running a turnin
#+BEGIN_SRC emacs-lisp
  (define-compilation-mode turnin-mode "turnin"
    "compilation mode for turnins")

  (defun $run-turnin ()
    "run a turnin command"
    (interactive)
    (let* ((model-root (file-truename (vc-git-root default-directory)))
           (compilation-environment (list (concat "MODEL_ROOT=" model-root)))
           (mock (y-or-n-p "Run as Mock? "))
           (clone (when mock (y-or-n-p "Clone ToT? ")))
           (eco (when (and (not mock)
                           (y-or-n-p "bug fix? "))
                  (read-string "Bug or ECO number(s): " nil
                               (defvar $turnin-eco-history nil))))
           (comment (unless mock
                      (read-string "turnin comment: " nil
                                   (defvar $turnin-message-history nil))))
           (compilation-buffer-name-function
            (lambda (mm)
              (format "*%s %s%s*"
                      (f-filename model-root)
                      (if mock "mock " "")
                      (downcase mm)))))
      ($compilation-start (string-join
                           (delq nil
                                 (list "source /p/hdk/rtl/hdk.rc -cfg shdk74 && turnin -c"
                                       ($git-command "config intel.cluster")
                                       "-s"
                                       ($git-command "config intel.stepping")
                                       (and mock "-mock")
                                       (and mock (not clone) "-no_clone")
                                       (and eco (concat "-bugecos " eco))
                                       (and comment (format "-comments \"%s\"" comment))))
                           " ")
                          'turnin-mode)))
#+END_SRC

** utility

*** enviroment
we are doing two things here to make compliation more convient

1. we want to compile with tcsh because that is the standard login shell
for EC machines and some of the compilation setup scripts require it,
we could make it work with bash, but this is easier.

2. by setting the compliation root, we can ensure that we are only
prompted to save buffers that actaully exist in the project instead of
it trying prompt us to save all buffers.
#+BEGIN_SRC emacs-lisp
  (defun $compile-with-tcsh (fn &rest args)
    "use tcsh (standard intel shell) for compilation"
    (let ((shell-file-name "tcsh"))
      (apply fn args)))

  (defvar $current-compilation-dir nil
    "root of current compliation")

  (defun $set-compilation-dir (&rest _)
    "set the root of the current compilation"
    (setq $current-compilation-dir default-directory))

  (setq compilation-save-buffers-predicate
        (lambda ()
          (when-let ((root (vc-git-root (buffer-file-name)))
                     (comp-root (vc-git-root $current-compilation-dir)))
            (and (not (string-match-p (rx ".log" eos) (buffer-file-name)))
                 (f-same? comp-root root)))))

  (advice-add 'compilation-start :around #'$compile-with-tcsh)
  (advice-add 'compilation-start :before #'$set-compilation-dir)
#+END_SRC

*** timestamps
it is often useful to know how long a command runs, but compilation
mode only gives us the end time normally. These functions will print
the timestamp in the compilation buffer.
#+BEGIN_SRC emacs-lisp
  (defvar $compilation-start-time nil)
  (make-variable-buffer-local '$compilation-start-time)

  (advice-add 'compilation-start :after
              (defun $compilation-set-start-time (&rest _)
                (with-current-buffer compilation-last-buffer
                  (setq-local $compilation-start-time (current-time)))))

  (add-hook 'compilation-finish-functions
            (defun $compilation-print-run-time (buffer _msg)
              (with-current-buffer buffer
                (save-excursion
                  (goto-char (point-max))
                  (insert (format " --- Total run time: %s ---\n"
                                  ($time-difference-to-string
                                   (current-time) $compilation-start-time)))))))

  (cl-defun $time-difference-to-string (time1 time2)
    "take the difference between two time stamps and print it"
    (let* ((names '("day" "hour" "minute" "second"))
           (decode (reverse (-take 4 (decode-time (time-subtract time1 time2) "UTC0"))))
           ;; units is the alist of (value . name) pairs. e.g. (1 . day) (4 . hour) etc.
           ;; since days starts at 1 (instead of 0) we subtract 1 from the first element
           (units (-zip-pair (cons (1- (car decode)) (cdr decode))
                             names)))
      (while units
        ;; When we find the first non-zero unit we print it as well as
        ;; the following unit.
        (when-let ((formatted ($format-time-unit (pop units))))
          (cl-return-from $time-difference-to-string
            (s-join ", " (remove nil (list formatted ($format-time-unit (pop units))))))))))

  (defun $format-time-unit (unit)
    "return formatted time string if unit is not 0"
    (when (and unit
               (> (car unit) 0))
      (let ((value (car unit))
            (name (cdr unit)))
        (format "%d %s%s" value name (if (>= value 1) "s" "")))))
#+END_SRC

*** queue
A series of functions for chaining together compliation that are going
to require previous steps. It checks to see if the new compilation is
using the same root as a current complilation. If that is the case it,
it blocks until the current one is done.
#+BEGIN_SRC emacs-lisp
  (defun $command-requires-blocking (mode dir)
    "Return t, if command might require adding to queue."
    (cl-loop for proc in compilation-in-progress
             for buf = (and proc (process-buffer proc))
             if (and proc buf
                     (process-live-p proc)
                     ($command-blocked-by mode dir buf))
             return t))

  (defun $command-blocked-by (mode dir buf)
    (let ((dep (cons 'compilation-mode
                     (nthcdr (1+ (cl-position mode $command-build-order))
                             $command-build-order))))
      (and (memq (buffer-local-value 'major-mode buf) dep)
           ($same-root dir buf))))

  (defun $same-root (buffer1 buffer2)
    "return t if commands are being run using the current root"
    (apply 'file-equal-p
           (--map (vc-git-root (if (bufferp it)
                                   (with-current-buffer it default-directory)
                                 it))
                  (list buffer1 buffer2))))

  (defvar $command-build-order
    (mapcar (lambda (x)
              (intern-soft (concat (symbol-name x) "-mode")))
            '(turnin simregress bman bman ipgen consume-ip))
    "Build order of commands that might require blocking.
  If an entry appears twice, that means it will block on itself.")

  (defvar $compilation-command-queue nil
    "compilation commands that are queued to be run once their
    dependencies have finished")

  (defun $compilation-clear-command-queue ()
    (interactive)
    (setq $compilation-command-queue nil))

  (defun $compilation-start (command mode &optional name-function)
    "start compilation if there are not other compliations running
    in the same root. If there are, defer till those compilations
    complete successfully"
    (if (and ($command-requires-blocking mode default-directory)
             (y-or-n-p "Add to command queue? "))
        (add-to-list '$compilation-command-queue
                     (list command
                           mode
                           (or name-function
                               compilation-buffer-name-function)
                           default-directory
                           compilation-environment)
                     'append)
      (compilation-start command mode name-function)))

  (defun $compilation-pop-command-queue (buffer exit-string)
    (setq $compilation-command-queue
          (cl-loop for waiting in $compilation-command-queue
                   for (command mode name-fn dir env) = waiting
                   if (and (string-prefix-p "exited abnormally" exit-string)
                           ($command-blocked-by mode dir buffer))
                   do (ignore)
                   else if (not ($command-requires-blocking mode dir))
                   do (let ((default-directory dir)
                            (compilation-directory dir)
                            (compilation-environment env))
                        (compilation-start command mode name-fn))
                   else collect waiting)))

  (add-hook 'compilation-finish-functions '$compilation-pop-command-queue)
#+END_SRC

** status
set of functions to show the status of all compilations, whether
finished or running, and easily jump to the associated buffer.
#+BEGIN_SRC emacs-lisp
  (defvar $compilation-finished-buffers nil
    "buffers that have finished compilation")

  (add-hook 'compilation-finish-functions
            (defun $compilation-add-buffer (buffer msg)
              (push (cons buffer (replace-regexp-in-string "\n" "" msg))
                    $compilation-finished-buffers)))

  ;; Helper function for $compilation-buffer-candidates
  (defun $compilation-proc-stalled (proc)
    (memq (process-buffer proc) $compilation-stalled-buffers))


  (defun $compilation-format-helm-candidate (buffer msg face)
    (cons (format "%-50s%s" buffer (propertize msg 'face face))
          buffer))

  (defun $compilation-buffers-candidates ()
    "show the status of all current compilations and allow easy
  access with helm"
    (setq $compilation-finished-buffers
          (seq-uniq $compilation-finished-buffers (lambda (x y) (eq (car x) (car y)))))
    ;; remove dead processes and buffers. If I kill buffers with helm
    ;; but they were still running then they will never get updated. So
    ;; we check for that at the start of every status.
    (setq compilation-in-progress
          (cl-remove-if-not (lambda (proc)
                              (let ((buf (process-buffer proc)))
                                (and (buffer-live-p buf)
                                     (process-live-p proc))))
                            compilation-in-progress))

    (let* ((stalled-procs (cl-remove-if-not #'$compilation-proc-stalled compilation-in-progress))
           (running-procs (cl-remove-if #'$compilation-proc-stalled compilation-in-progress))
           (finished-buffers (cl-remove-if (-lambda ((buffer))
                                             (or (not (buffer-live-p buffer))
                                                 (memq (get-buffer-process buffer) compilation-in-progress)))
                                           $compilation-finished-buffers))
           (waiting-buffers (mapcar  (lambda (command)
                                       (get-buffer-create
                                        (cl-destructuring-bind (_cmd mode name _dir _env) command
                                          (funcall (or name compilation-buffer-name-function 'identity)
                                                   (string-remove-suffix "-mode" (symbol-name mode))))))
                                     $compilation-command-queue))
           (formatted-stalled-buffers (--map ($compilation-format-helm-candidate (process-buffer it) "stalled" 'compilation-warning)
                                             stalled-procs))
           (formatted-running-buffers (--map ($compilation-format-helm-candidate (process-buffer it) "running" 'compilation-line-number)
                                             running-procs))
           (formatted-waiting-buffers (--map ($compilation-format-helm-candidate it "waiting" 'term-color-cyan)
                                             waiting-buffers))
           (formatted-finished-buffers (--map (let* ((buffer (car it))
                                                     (msg (cdr it))
                                                     (face (if (string-prefix-p "exited abnormally" msg)
                                                               'compilation-error
                                                             'compilation-info)))
                                                ($compilation-format-helm-candidate buffer msg face))
                                              finished-buffers)))
      (append formatted-stalled-buffers formatted-finished-buffers formatted-running-buffers formatted-waiting-buffers)))

  (defun $compilation-jump-to-buffer ()
    "select from active and finished compilation buffers"
    (interactive)
    (helm
     :buffer "*Helm compilation buffers*"
     :prompt "jump to compilation buffer: "
     :sources (helm-build-sync-source
                  "compilation buffers"
                :candidates ($compilation-buffers-candidates)
                :action helm-type-buffer-actions)))

#+END_SRC

** alert
the alert package lets us creat notification for any event we want. In
this case we are intersted in knowing when a compliation finishes or
stalls.
#+BEGIN_SRC emacs-lisp
  (add-hook 'compilation-finish-functions
            (defun $notify-compile-done (_buffer exit-string)
              "notfiy the user that compliation is finished"
              (alert "compliation finished"
                     :severity (if (string-prefix-p "exited abnormally" exit-string)
                                   'high
                                 'normal))))

  (defun $clear-alert ()
    "clear persistent alert"
    (interactive)
    (alert ""))

  ($leader-set-key
    "oa" '$clear-alert)
#+END_SRC

** readability
some basic font lock to make compilation and log buffers easier to
read. We want to see labels and delimiters very quick so we can tell
what part of a buffer we are in
#+BEGIN_SRC emacs-lisp

  (define-arx log-rx
    (append $rx-defaults
            '((I (: bol (opt "-I-")))
              (I: (: bol (opt "-I-:"))))))

  (defvar $compilation-font-lock-keywords
    `((,(log-rx I: spc* (group (in "#*") (in " \t#*=") ->) eol)
       1 'compilation-line-number)
      (,(log-rx I: spc* (group (repeat 4 "=") ->) eol)
       1 'compilation-line-number)
      (,(log-rx I spc* (group (repeat 3 "-") ->) eol)
       1 'compilation-line-number)
      (,(log-rx I (opt ":")  (group (not (in "-")) (1+ (in alnum " \t_-"))) ": ")
       1 'font-lock-function-name-face)
      (,(log-rx bol (group "-I-"))
       1 'compilation-info prepend)
      (,(log-rx I: (group (or "-I-" "Note-" "NOTE" "OVM_INFO")))
       1 'compilation-info prepend)
      (,(log-rx I: (group (or "-E-" "-F-" "Error-" "Fatal-" "OVM_ERROR" "ERROR" "FATAL" "OVM_FATAL")))
       1 'compilation-error prepend)
      (,(log-rx I: (group (or "-W-" "Warning-" "WARNING" "OVM_WARNING")))
       1 'compilation-warning prepend)))


  (font-lock-add-keywords 'compilation-mode $compilation-font-lock-keywords)
  (font-lock-add-keywords 'log-mode $compilation-font-lock-keywords)
#+END_SRC

