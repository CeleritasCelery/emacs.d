 #+TITLE: Emacs Literate Configuration
#+AUTHOR: Troy Hinckley
#+PROPERTY: header-args :tangle yes


* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** About this file
This is an Emacs literate configuration. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Troy Hinckley"
        user-mail-address "t.macman@gmail.com")
#+END_SRC


** Emacs Initialization

*** Settings

The location of all cached files that save history between runs
#+BEGIN_SRC emacs-lisp
  (defvar $cache-directory (expand-file-name "cache" user-emacs-directory)
    "The location of all save and restore type files")

#+END_SRC
don't use menu or scroll bars. We want the UI to be as clean as
possible.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq inhibit-startup-screen t)
  (toggle-frame-fullscreen)
  (add-hook 'focus-in-hook 'redraw-display)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

use =y= and =n= instead of =yes= and =no=
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Packages
:PROPERTIES:
:VISIBILITY: children
:END:

** Package Manager
We are going to use =straight.el= as package manager because it allows us to
easily maintain private repos of packages. There is bootstrap code on the
website, but I could not get it to work behind the proxy so I cloned it myself.
I will see later if I can get the bootstrap install code to work. 

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory) nil 'nomessage)
#+END_SRC

** Use-package

=use-package= is a macro that allows to easily define and load other packages.
It is the first thing we want to install. I am using my own fork of the package
that contains more sane defaults for the =:hook= keyword.

#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(use-package
      :type git :host github :repo "CeleritasCelery/use-package"
      :upstream (:host github
                       :repo "jwiegley/use-package")))
#+END_SRC

Setting =straight-use-package-by-default= to =t= we can ensure that
=use-pacakge= will use =straight.el= to install missing packages for us. Always
defer and always ensure will guarntee that all dependaceies are loaded and that
packages are autoloaded unless explicitly stated otherwise.
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t
        use-package-always-defer t
        use-package-always-ensure t)
#+END_SRC

This allows us to remove mode-line lighters
#+BEGIN_SRC emacs-lisp
  (use-package delight)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC

** bootstrap
packages that are used to setup the my emacs enviroment

This package lets us use "SPC" as leader key for other
keybindings.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-create-definer $leader-set-key
      :prefix "SPC"
      :states 'motion
      :keymaps 'override)
    (general-create-definer $leader-local-set-key
      :prefix ","
      :states 'motion))
#+END_SRC

Use tab for indentation and symbol completion
#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(insert normal visual)
                      "TAB" 'indent-for-tab-command)
  (setq tab-always-indent 'complete)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setq recentf-save-file (expand-file-name "recentf" $cache-directory)
          recentf-max-saved-items 500))
#+END_SRC

** UI
packages that used to improve the visuals and interface for Emacs

Setup the font that I want to use
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Hasklig"
                    :height 110)
#+END_SRC

Creating a collection of themes that I like. I can use
=counsel-load-themes= to switch between them
#+BEGIN_SRC emacs-lisp
    (use-package challenger-deep-theme)
    (use-package gruvbox-theme)
    (use-package darktooth-theme)
    (use-package spacemacs-theme)
    (use-package dracula-theme)
    (use-package moe-theme)
    (use-package doom-themes)
    (use-package solarized-theme)
    (use-package color-theme-sanityinc-tomorrow)
    (use-package noctilux-theme)
    (use-package flatland-theme)
    (use-package monokai-theme)
    (add-to-list 'custom-theme-load-path
                 "/nfs/site/home/tjhinckl/.emacs.d/straight/build/moe-theme/")
   (load-theme 'darktooth t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight
    :demand t
    :init
    (setq which-key-idle-delay 0.5
          which-key-idle-secondary-delay 0.1
          which-key-allow-evil-operators t)
    :config
    (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (setq aw-dispatch-always t
          aw-background nil
          aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    ($leader-set-key
      "w" 'ace-window)
    :config
    (add-to-list 'aw-dispatch-alist '(?w $toggle-maximize-window)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package init-display
    :straight (init-display
               :local-repo "init-display")
    :init
    ($leader-set-key
      "TAB" '$alternate-buffer
      "fe" '$find-user-config-file))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun $quit-emacs ()
    "save buffers and quit"
    (interactive)
    (save-some-buffers)
    (kill-emacs))
  ($leader-set-key
    "q" '(:ignore t :wk "quit")
    "qq" '$quit-emacs)
#+END_SRC

changing the volume on my mic triggers these bindings.
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "<XF86AudioLowerVolume>" 'ignore
   "<XF86AudioRaiseVolume>" 'ignore)
#+END_SRC

** evil
evil is the Extensible VI Layer. It gives us all the power of vim
without the draw back of using vimscript for config.

Evil will be loaded by one of it's dependacey packages. We need to set
=evil-want-integration= before loading evil so that =evil-collection= can
overide the modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init 
    (setq evil-want-integration nil
          evil-kill-on-visual-paste nil
          evil-search-module 'evil-search
          evil-magic 'very-magic ;; make evil search regex more PCRE compatible
          evil-ex-search-vim-style-regexp t)
    :config
    (general-swap-key nil 'motion "0" "^")
    (evil-mode 1))
#+END_SRC

=C-i= can be used to move forward in cursor jumps, but Emacs binds it to =TAB=, so
we rebinding it to =H-i=. Though this won't work in the terminal
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'input-decode-map
   "C-i" "H-i")
  (general-define-key
   :states 'normal
   "H-i" 'evil-jump-forward)
#+END_SRC

We want to hybridize some usefull emacs commands with better evil keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'insert
   "C-y" 'yank
   "C-e" 'mwim-end-of-code-or-line
   "C-a" 'mwim-beginning-of-code-or-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ($leader-set-key
    "h" '(:ignore t :wk "help")
    "hd" '(:ignore t :wk "describe")
    "hdf" 'describe-function
    "hdv" 'describe-variable
    "hdk" 'describe-key
    "f" '(:ignore t :wk "files")
    "fa" 'save-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :delight
    :demand t
    :init
    (setq evil-escape-unordered-key-sequence t
          evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :demand t
    :after evil
    :config
    (defun $unmap-leader (_m keymaps)
      (when keymaps
        (general-define-key
         :states 'normal
         :keymaps keymaps
         "SPC" nil)))
    (add-hook 'evil-collection-setup-hook '$unmap-leader)
    (evil-collection-init '(calc calendar custom debug eldoc elisp-mode dired help info occur wgrep wdired which-key)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :demand t
    :config
    (global-evil-surround-mode)
    (general-define-key
     :states 'visual
     :keymaps 'evil-surround-mode-map
     "s" 'evil-surround-region
     "S" 'evil-substitute))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :commands (evilnc-copy-and-comment-operator
               evilnc-comment-operator)
    :init
    ($leader-set-key
      "." '(evilnc-copy-and-comment-operator :wk "copy-and-comment")
      ";" '(evilnc-comment-operator :wk "comment")))
#+END_SRC

These packages are great at providing editor shortcuts for editing
lisp
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :delight
    :hook emacs-lisp-mode
    :init
    (setq lispy-colon-p nil))

  (use-package lispyville
    :delight
    :hook lispy-mode
    :init
    (setq lispyville-key-theme
          '(operators
            c-w
            slurp/barf-cp
            additional
            additional-movement
            additional-insert
            additional-wrap
            mark)))
#+END_SRC

** Ivy
   
I feel like ivy is simpler to setup so I am going to give it a try. I am going
to have to try to fix =counsel-ag= out of order matching if I want to live with
it though.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :delight
    :general
    (:keymaps 'ivy-minibuffer-map
              "C-j" 'ivy-next-line
              "C-k" 'ivy-previous-line
              "C-h" "DEL"
              "C-S-H" help-map
              "C-l" 'ivy-alt-done
              ;; "TAB" 'ivy-alt-done
              )
    :init
    (setq ivy-height 15
          ivy-use-virtual-buffers t
          ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    ($leader-set-key
      "b" '(:ignore t :wk "buffers")
      "bb" 'ivy-switch-buffer
      "r" 'ivy-resume)
    :config
    (evil-collection-init 'ivy)
    (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :demand t
    :after (ivy hydra))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :init
    ($leader-set-key
      "s" '(:ignore t :wk "search")
      "ss" 'swiper))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :delight
    :init
    ($leader-set-key
      "ff" 'counsel-find-file
      "sf" 'counsel-ag
      "SPC" 'counsel-M-x)
    :config
    (counsel-mode))
#+END_SRC

smex is an enchanced version of =M-x= that will record history and is
integrated into ivy
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (setq smex-history-length 32
          smex-save-file (expand-file-name "smex-items" $cache-directory)))
#+END_SRC

** files
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init
    (setq avy-timeout-seconds 0.25)
    (general-define-key
     :states '(normal visual)
     ";" 'avy-goto-char-timer)
    :config
    (evil-collection-init 'avy))
#+END_SRC

** Org
I want to to get this more organized, but for now I will just put
basic org config here
#+BEGIN_SRC emacs-lisp
  ($leader-local-set-key
    :keymaps 'org-mode-map
    "," 'org-edit-special)

  ($leader-local-set-key
    :keymaps 'org-src-mode-map
    "," 'org-edit-src-exit)

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (org-indent-mode)
#+END_SRC

** elisp

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook emacs-lisp-mode)
#+END_SRC
