#+TITLE: Emacs Literate Configuration
#+AUTHOR: Troy Hinckley
#+PROPERTY: header-args :tangle yes


* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:
** Design Choices
I have some basic design principles that I am trying to keep
consistent through all of my config.

*** namespace
I am using =$= as my personal namespace. I like it because it reminds
me of perl, it is really simple, and this is elisp, so I can make my
namespace whatever I want.

*** lambdas
the easiest way add a simple wrapper function to a hook or advice is
to use lambdas. However that has the problem of making them very hard
to inspect and remove. It is better to use named functions. However it
can be confusing if a function is only used as a named lambda or if it
is being used elsewhere. Therefore I will put named functions (using
=defun=) inside of =add-hook= or =advice-add=. This allows me to
clearly associate the function with the purpose but also avoids the
confusion surrounding anonymous functions.

*** overrides
Never override a function when an advice will do. when I actually do
need to override a function, I will try to use the package =el-patch=
to make it maintainable.


** Emacs Initialization

*** lexical bindings

make this file lexically bound
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- personal emacs config file -*- lexical-binding: t -*-
#+END_SRC

*** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Troy Hinckley"
        user-mail-address "t.macman@gmail.com")
#+END_SRC

*** customization

stolen from https://github.com/abo-abo/oremacs/blob/github/init.el
makes sure that we are using the correct setter for all variables
#+BEGIN_SRC emacs-lisp
(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set) 'set-default) ',variable ,value))
#+END_SRC

*** Settings

#+BEGIN_SRC emacs-lisp
  (defvar $leader-key "SPC"
    "leader key used to quicky access commands.")

  (defvar $mm-leader-key ","
    "leader key for major mode specific commands")
#+END_SRC

don't use menu or scroll bars. We want the UI to be as clean as
possible.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq inhibit-startup-screen t)
  (toggle-frame-fullscreen)
  (add-hook 'focus-in-hook 'redraw-display)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

use =y= and =n= instead of =yes= and =no=
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

move the custom file to its own loaction so it does not clutter us.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load-file custom-file)
#+END_SRC

*** tangling
    we want to tangle on exit so that it will make startup time
    quicker.
#+BEGIN_SRC emacs-lisp
  (defun $tangle-init-file ()
    "tangle my emacs org file before closing to make startup faster."
    (interactive)
    (require 'ob-tangle)
    (org-babel-tangle-file (expand-file-name "emacs.org" user-emacs-directory)
                           (expand-file-name "emacs.el" user-emacs-directory)))

  (add-hook 'kill-emacs-hook '$tangle-init-file)
#+END_SRC

    by setting the initial mode we won't have to load lisp at startup
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC
* Packages
:PROPERTIES:
:VISIBILITY: children
:END:
** Package Manager
We are going to use =straight.el= as package manager because it allows
us to easily maintain private repos of packages. This is still slower
then using package.el, but I think it is worth it. below is the
bootstrap code to download the package manager and run it.

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-url  "http://git.savannah.gnu.org/git/emacs/elpa.git")
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 4))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

** packages

=use-package= is a macro that allows to easily define and load other
packages.  It is the first thing we want to install. I am using my own
fork of the package that contains more sane defaults for the =:hook=
keyword (essentially it automatically adds the =-mode= suffix).

*** use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(use-package
      :type git :host github :repo "CeleritasCelery/use-package"
      :upstream (:host github
                       :repo "jwiegley/use-package")))
#+END_SRC

Setting =straight-use-package-by-default= to =t= we can ensure that
=use-pacakge= will use =straight.el= to install missing packages for
us. Always defer will guarantee that all packages are autoloaded
unless explicitly stated otherwise.
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t
        use-package-always-defer t)
#+END_SRC

*** delight
This allows us to remove mode-line lighters
#+BEGIN_SRC emacs-lisp
  (use-package delight)
#+END_SRC

*** emacs startup profiler
The "Emacs Startup profiler". This allows us to see what parts of the
config are most heavily impacting start up time. you can't optimize
until you have good info
#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC

** bootstrap
packages that are used to setup my emacs enviroment. They are
needed as dependaceies for other packages later on.

*** general package
This package lets us use "SPC" as leader key for other keybindings. It
also provides a lot of helper functions to make binding keys easier
and smarter.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-create-definer $leader-set-key
      :prefix $leader-key
      :states 'motion
      :keymaps 'override)
    (general-create-definer $leader-local-set-key
      :prefix $mm-leader-key
      :states 'motion))
#+END_SRC

Use tab for indentation and symbol completion
#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(insert normal visual)
                      "TAB" 'indent-for-tab-command)
  (setq tab-always-indent 'complete)
#+END_SRC

*** no littering
make sure that third party files cannot leave conifg and save files
all over the place
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :demand t)
#+END_SRC

*** save hist
save minibuffer history between sessions.
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :straight nil
    :defer 1
    :config
    (savehist-mode))
#+END_SRC

*** hyrda
hydra provides repeatable keybindings to quickly execute multiple
commands
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

*** el-patch
#+BEGIN_SRC emacs-lisp
  (use-package el-patch)
#+END_SRC
** UI
packages that are used to improve the visuals and interface for Emacs

*** highlight line

highlight the current line with a background face
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :demand t
    :config
    (global-hl-line-mode))
#+END_SRC

*** keybings
use =key-freq= to see your key usage.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :defer 1
    :init
    (setq keyfreq-excluded-commands '(org-self-insert-command self-insert-command))
    :config
    (keyfreq-mode)
    (keyfreq-autosave-mode))
#+END_SRC

*** font
Setup the font that I want to use. Hasklig is a fork of /Source Code
Pro/ that contains ligatures.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Hasklig"
                    :height 120)
#+END_SRC

use a hydra to scale the text size
#+BEGIN_SRC emacs-lisp
  (defhydra text-scale (:hint nil)
    "
  Text Scale
    [_+_/_=_] scale up [_-_] scale down [_0_] reset font [_q_] quit
  "
    ("+" text-scale-increase)
    ("=" text-scale-increase)
    ("-" text-scale-decrease)
    ("0" (text-scale-set 0) :exit t)
    ("q" nil :exit t))
  ($leader-set-key
    "z" '(:ignore t :wk "util")
    "zs" 'text-scale/body)
#+END_SRC

*** ligatures
liguatures use a custom symbol to represent two or more
characters. The haskling font is required to make these work. Another
option would be FiraCode, but I am pretty happy with Hasklig for now.
#+BEGIN_SRC emacs-lisp

  (setq prettify-symbols-unprettify-at-point t)

  (defvar $prog-prettify-symbols-alist
    `(("&&"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE100)))
      ("||"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE104)))
      ("::"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE106)))
      ("=="  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE107)))
      ("=>"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE10A)))
      (">>"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE10D)))
      ("->"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE112)))
      ("<<"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE11C)))
      (".."  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE11F)))
      ("++"  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE121)))
      ("!="  . (?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE123)))
      ("..." . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE120)))
      ("->>" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE126)))
      ("=<<" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Br) ,(decode-char 'ucs #XE10B)))
      (".=<<" . (?· (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Br)  ,(decode-char 'ucs #XE10B)))
      (".="  . (?· (Br . Bl) ?=))
      ("<="  . (?\s (Br . Bl) ?\s (Bc . Bc) ?< (Bc . Bc) ?_))
      (">="  . (?\s (Br . Bl) ?\s (Bc . Bc) ?> (Bc . Bc) ?_))))

  (defun $prettify-base-symbols ()
    "enable hasklig ligatures"
    (interactive)
    (dolist (symbol $prog-prettify-symbols-alist)
      (add-to-list 'prettify-symbols-alist symbol))
    (prettify-symbols-mode))

  (add-hook 'prog-mode-hook '$prettify-base-symbols)
#+END_SRC

*** vnc size
change the size of the VNC to match the size of the monitor that I am
using. Since I always run my VNC fullscreen having the VNC resolution
not match the resolution of my monitor results in weird text sizes.
#+BEGIN_SRC emacs-lisp
  (defun vnc-resize (size)
    (shell-command (concat "xrandr --size " size)))

  (defhydra vnc-resize (:columns 2 :exit t)
    "VNC Resize"
    ("l" (vnc-resize "1920x1200") "single monitor (large)")
    ("m" (vnc-resize "1536x864") "mobile")
    ("w" (vnc-resize "3840x1200") "double monitor (wide)")
    ("s" (vnc-resize "1920x1080") "short")
    ("r" (vnc-resize "1600x1200") "square"))
  ($leader-set-key
    "zn"  'vnc-resize/body)
#+END_SRC

*** themes
Creating a collection of themes that I like. I can use
=helm-themes= to switch between them. Some of these themes do
not have all faces that I would like, so When I get some time I will
modify them.
#+BEGIN_SRC emacs-lisp
  (use-package challenger-deep-theme)
  (use-package gruvbox-theme)
  (use-package darktooth-theme)
  (use-package spacemacs-theme)
  (use-package dracula-theme)
  (use-package moe-theme
    :init
    (add-to-list 'custom-theme-load-path
                 "~/.emacs.d/straight/build/moe-theme/"))
  (use-package doom-themes)
  (use-package solarized-theme)
  (use-package color-theme-sanityinc-tomorrow)
  (use-package noctilux-theme)
  (use-package flatland-theme)
  (use-package monokai-theme)

  (load-theme 'doom-one t)
#+END_SRC

*** modeline
I am still struggling to find a modeline I really like. I have settled
on doom for now, but there are some segments that I would like to add
such as compilation exit status. My biggest beef with doom-modeline is
it does not play nice non "doom" themes. I think powerlines are cool
looking, but I am honestly becomeling less of a fan of them. I may
just end up making my own modeline from scratch.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/ignore.el
  (use-package smart-mode-line
    :demand t
    :config
    (sml/setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight
    (doom-modeline :type git :host github :repo "seagle0128/doom-modeline")
    :hook (after-init . doom-modeline-init)
    :config
    (setq eldoc-eval-preferred-function 'eval-expression))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/ignore.el
  (use-package telephone-line
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
          telephone-line-lhs '((evil   . (telephone-line-evil-tag-segment))
                               (accent . (telephone-line-vc-segment
                                          telephone-line-process-segment))
                               (nil    . (telephone-line-buffer-segment))))
    (telephone-line-mode))
#+END_SRC

*** which key
which key is an awesome package that shows me the key I can press
after choosing a prefix key.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight
    :demand t
    :init
    (setq which-key-idle-delay 0.5
          which-key-idle-secondary-delay 0.1
          which-key-allow-evil-operators t)
    :config
    (which-key-mode))
#+END_SRC

*** ace window
This is a window managment package that I am testing out. it works
pretty well, but I have a couple of things I would like to change.
1. there is no good way to operate on the current window, you have to
   knows its letter first, which is not always easy. my idea is that
   the capital of action would operate on the current window. For
   example =SPC wX= would delete the current window. This would take a
   fair amount of work to change the package however. Or at least so I
   think, I have not actually looked at it yet. I want to wait for
   while to make this change so that I can get the muscle memory down
   and see if that makes this easier with this package.
2. This package will split the window but leave the cursor in the old
   window. I relalize this is just a little thing. but it is very
   unintuitive for me and I have to think about it every time.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (setq aw-dispatch-always t
          aw-background nil)
    ($leader-set-key
      "w" 'ace-window)
    :config
    (add-to-list 'aw-dispatch-alist '(?w $toggle-maximize-window))
    (add-to-list 'aw-dispatch-alist '(?d aw-delete-window "delete window"))
    (add-to-list 'aw-dispatch-alist '(?s aw-split-window-horz "Split Horz window")))

  ;; from https://gist.github.com/3402786
  (defun $toggle-maximize-window ()
    "Maximize buffer"
    (interactive)
    (if (and (= 1 (length (window-list)))
             (assoc ?_ register-alist))
        (jump-to-register ?_)
      (progn
        (window-configuration-to-register ?_)
        (delete-other-windows))))
#+END_SRC

*** shackle
this is a window managment package that is very minimalistic. I am
going to use it until I find a case where it won't work, then I might
try a more powerful package like popwin.
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :demand t
    :init
    (setq shackle-rules
          '((help-mode :select t)
            ("*ielm*" :popup t)))
    :config
    (shackle-mode))
#+END_SRC

*** buffers
A collection of functions stolen from Spacemacs that allows me to more
easily manipulate files, buffers, and windows.

#+BEGIN_SRC emacs-lisp
  (defun $alternate-buffer (&optional window)
    "Switch back and forth between current and last buffer in the
  current window."
    (interactive)
    (let ((current-buffer (window-buffer window))
          (buffer-predicate
           (frame-parameter (window-frame window) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (switch-to-buffer
       (or (cl-find-if (lambda (buffer)
                         (and (not (eq buffer current-buffer))
                              (or (null buffer-predicate)
                                  (funcall buffer-predicate buffer))))
                       (mapcar #'car (window-prev-buffers window)))
           ;; `other-buffer' honors `buffer-predicate' so no need to filter
           (other-buffer current-buffer t)))))

  (defun $quit-emacs ()
    "save buffers and quit"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

  (defun $open-scratch-buffer ()
    "open the scratch buffer"
    (interactive)
    (set-window-buffer (selected-window) "*scratch*"))

  (defun $show-and-copy-buffer-filename (arg)
    "Show and copy the full path to the current file in the minibuffer."
    (interactive "P")
    ;; list-buffers-directory is the variable set in dired buffers
    (let ((file-name (or (buffer-file-name)
                         list-buffers-directory
                         default-directory)))
      (if file-name
          (message (kill-new (if (null arg)
                                 (file-truename file-name)
                               file-name)))
        (error "Buffer not visiting a file"))))

  ($leader-set-key
    "TAB" '$alternate-buffer
    "fy" '$show-and-copy-buffer-filename
    "b" '(:ignore t :wk "buffers")
    "bs" '$open-scratch-buffer
    "q" '(:ignore t :wk "quit")
    "qq" '$quit-emacs)
#+END_SRC

*** persp-mode
persp-mode is layout managment package that provides way more
functionality then I want. All I really are about is having named
groups of eyebrowse window configs. I could probably drop persp mode
and create a wrapper around =eyebrowse= that could group the window
configs under a name. I would use only eyebrowse, but then I would
have to try to remember what windows go to what project, and that can
get a little confusing. Also I have created some fuctions that make
shell-pop perspective local, and I really like that feature.
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :init
    (setq persp-auto-save-opt 0)
    (defhydra persp (:exit t :pre (persp-mode))
      "Perspective"
      ("l" persp-switch "switch")
      ("n" persp-next "next" :exit nil)
      ("p" persp-prev "previous" :exit nil)
      ("r" persp-rename "rename")
      ("a" persp-add-buffer "add buffer")
      ("k" persp-remove-buffer "remove buffer")
      ("D" persp-kill "Delete perspective"))
    ($leader-set-key
      "l" 'persp/body))
#+END_SRC

*** eyebrowse
minimal window managment package.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :init
    (defhydra eyebrowse (:exit t :pre (eyebrowse-mode))
      "Window Config"
      ("e" eyebrowse-switch-to-window-config "switch")
      ("n" eyebrowse-next-window-config "next" :exit nil)
      ("p" eyebrowse-prev-window-config "previous" :exit nil)
      ("d" eyebrowse-close-window-config-prompt "close")
      ("1" eyebrowse-switch-to-window-config-1)
      ("2" eyebrowse-switch-to-window-config-2)
      ("3" eyebrowse-switch-to-window-config-3)
      ("4" eyebrowse-switch-to-window-config-4)
      ("5" eyebrowse-switch-to-window-config-5))
    ($leader-set-key
      "e" 'eyebrowse/body)
    :config
    (general-define-key
     :keymaps 'eyebrowse-mode-map
     "C-c C-w" nil))
#+END_SRC

*** restart
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :init
    ($leader-set-key
      "qr" 'restart-emacs))
#+END_SRC

changing the volume on my mic triggers these bindings. So we ignore them.
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "<XF86AudioLowerVolume>" 'ignore
   "<XF86AudioRaiseVolume>" 'ignore)
#+END_SRC

** Ivy

#+BEGIN_SRC emacs-lisp
  (defvar $use-ivy nil
    "use Ivy for completion")
  (defvar $use-helm t
    "use helm for completion")
#+END_SRC

*** ivy
I feel like ivy is simpler to setup so I am going to give it a try. I am going
to have to try to fix =counsel-ag= out of order matching if I want to live with
it though.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight
    (ivy
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :delight
    :general
    (:keymaps 'ivy-minibuffer-map
              "C-j" 'ivy-next-line
              "C-k" 'ivy-previous-line
              "C-h" "DEL"
              "C-S-H" help-map
              "C-l" 'ivy-alt-done
              "<C-return>" 'ivy-immediate-done)
    :init
    (setq ivy-height 15
          ivy-use-virtual-buffers t
          ivy-extra-directories nil
          ivy-use-selectable-prompt t
          ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    ($leader-set-key
      "bb" 'ivy-switch-buffer
      "r" 'ivy-resume)
    :config
    (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :straight
    (ivy-hydra
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :after (ivy hydra))
#+END_SRC

*** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight
    (swiper
     :files ("swiper.el")
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :init
    ($leader-set-key
      "s" '(:ignore t :wk "search")
      "ss" 'swiper))
#+END_SRC

*** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight
    (counsel
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :delight
    :init
    ($leader-set-key
      "ff" 'counsel-find-file
      "sf" 'counsel-ag
      "SPC" 'counsel-M-x)
    :config
    (counsel-mode))

  (defun $open-file-in-clipboard ()
    "open the current file in the clipboard"
    (interactive)
    (let* ((file (substitute-env-vars (string-trim (current-kill 0))))
           (default-directory (file-name-directory file)))
      (counsel-find-file (file-name-nondirectory file))))
  ($leader-set-key
    "fo" '$open-file-in-clipboard)
#+END_SRC

*** rich foratting
This package makes =ivy-switch-buffer= behave more like =helm-mini=
(i.e. displays the buffer type and full path to recentf files)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ivy-rich
    :demand t
    :after ivy
    :config
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t)
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC

*** smex
smex is an enchanced version of =M-x= that will record history and is
integrated into ivy
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (setq smex-history-length 32))
#+END_SRC

** evil
evil is the Extensible VI Layer. It gives us all the power of vim
without the draw back of using vimscript for config.

*** general

because we are using evil collection, we need to disable evil's
builtin integration *before* evil is loaded.
#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration nil)
#+END_SRC

we want to overide most control keybindings to make them behave like
Vim instead of like Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :init
          evil-kill-on-visual-paste nil
          evil-search-module 'evil-search
          evil-magic 'very-magic
          evil-want-C-u-scroll t
          evil-want-C-d-scroll t
          evil-want-C-w-delete t
          evil-want-C-i-jump t
          evil-want-Y-yank-to-eol t
          evil-ex-search-vim-style-regexp t)
    :config
    (general-swap-key nil 'motion "0" "^")
    (evil-mode 1)

    (general-define-key
     :states 'motion
     [remap evil-next-line] 'evil-next-visual-line
     [remap evil-previous-line] 'evil-previous-visual-line)

    (general-define-key
     :states 'operator
     [remap evil-next-line] 'evil-next-line
     [remap evil-previous-line] 'evil-previous-line)

    (defvar evil-v$-gets-eol nil)

    (evil-define-motion evil-end-of-line (count)
      "Move the cursor to the end of the current line. If COUNT is
    given, move COUNT - 1 lines downward first."
      :type inclusive
      (move-end-of-line count)
      (when evil-track-eol
        (setq temporary-goal-column most-positive-fixnum
              this-command 'next-line))
      (unless (and (evil-visual-state-p) evil-v$-gets-eol)
        (evil-adjust-cursor)
        (when (eolp)
          ;; prevent "c$" and "d$" from deleting blank lines
          (setq evil-this-type 'exclusive)))))
#+END_SRC

*** text objects
text objects are areas of the buffer that can be easily selected with
one key. The =evil-indent-plus= pakcage provides =i=, =I=, and =J=
texdt objects the select based on indentation.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'evil
    (evil-define-text-object evil-inner-buffer (count &optional beg end type)
      (list (point-min) (point-max)))

    (evil-define-text-object evil-pasted (count &rest args)
      (list (save-excursion (evil-goto-mark ?\[) (point))
            (save-excursion (1+ (evil-goto-mark ?\])) (point))))

    (evil-define-text-object evil-filename (count &rest args)
      (let ((bounds (bounds-of-thing-at-point 'filename)))
        (list (car bounds) (cdr bounds))))
  
    (general-define-key
     :keymaps 'evil-inner-text-objects-map
     "g" 'evil-inner-buffer
     "P" 'evil-pasted
     "F" 'evil-filename))

  (use-package evil-indent-plus
    :demand t
    :config
    (evil-indent-plus-default-bindings))
#+END_SRC

*** keybindings
=C-i= can be used to move forward in cursor jumps, but Emacs binds it to =TAB=, so
we rebinding it to =H-i=. Though this won't work in the terminal
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'input-decode-map
   "C-i" "H-i")
  (general-define-key
   :states 'normal
   "H-i" 'evil-jump-forward)
#+END_SRC

We want to hybridize some usefull emacs commands with better evil keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'insert
   "C-y" 'yank)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ($leader-set-key
    "h" '(:ignore t :wk "help")
    "hd" '(:ignore t :wk "describe")
    "hdf" 'describe-function
    "hdv" 'describe-variable
    "hdk" 'describe-key
    "hde" 'describe-face
    "hdm" 'describe-mode
    "hs"  'profiler-start
    "hr"  'profiler-report
    "d" 'save-buffer
    "bd" 'kill-buffer
    "br" 'rename-buffer
    "s" '(:ignore t :wk "search")
    "sc" 'evil-ex-nohighlight
    "u" 'universal-argument)
#+END_SRC

*** unimpaired
evil unimpaired binds some usefull functions to some quick keys.
#+BEGIN_SRC emacs-lisp
  (use-package evil-unimpaired
    :straight
    (evil-unimpaired
     :type git :host github :repo "CeleritasCelery/evil-unimpaired"
     :upstream (:host github
                      :repo "zmaas/evil-unimpaired"))
    :defer 2
    :init
    (setq evil-unimpaired-leader-keys '("gk" . "gj"))
    :config
    (evil-unimpaired-mode))
#+END_SRC

*** anzu
provides total number of searches in the modeline
#+BEGIN_SRC emacs-lisp
  (use-package evil-anzu
    :demand t)
#+END_SRC

*** snipe
we only want evil snipe for the ability to repeat =f,F,t,T=. I find
avy is better for the actual sniping
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :demand t
    :init
    (setq evil-snipe-override-evil-repeat-keys nil)
    :config
    (evil-snipe-override-mode))
#+END_SRC

*** vi tilde
this package adds a tilde to the fringe of every line that is
empty. eventually I just want to replace this with a save buffer hook
that removes additional lines at the end of the file.
#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :delight
    :demand t
    :config
    (global-vi-tilde-fringe-mode))
#+END_SRC

*** escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :delight
    :demand t
    :init
    (setq evil-escape-unordered-key-sequence t
          evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode))
#+END_SRC

*** collection
evil collection evilifies several major and minor modes to make them
behave better with evil.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :demand t
    :config
    (add-hook 'evil-collection-setup-hook
              (defun $unmap-leader (_m keymaps)
                (when keymaps
                  (general-define-key
                   :states 'normal
                   :keymaps keymaps
                   $leader-key nil
                   $mm-leader-key nil))))
    (evil-collection-init '(calc calendar custom debug eldoc
                                 elisp-mode dired help info occur
                                 popup profiler wgrep wdired
                                 which-key)))
#+END_SRC

*** surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :defer 4
    :config
    (global-evil-surround-mode)
    (general-define-key
     :states 'visual
     :keymaps 'evil-surround-mode-map
     "s" 'evil-surround-region
     "S" 'evil-substitute))
#+END_SRC

*** ediff
#+BEGIN_SRC emacs-lisp
  (use-package evil-ediff
    :commands evil-ediff-startup-hook
    :hook (ediff-startup . evil-ediff-startup-hook)
    :init
    (evil-set-initial-state 'ediff-mode 'motion)
    :config
    (evil-ediff-adjust-help))
#+END_SRC

*** commenting
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :commands (evilnc-copy-and-comment-operator
               evilnc-comment-operator)
    :init
    ($leader-set-key
      "." '(evilnc-copy-and-comment-operator :wk "copy-and-comment")
      ";" '(evilnc-comment-operator :wk "comment")))
#+END_SRC

*** lispy
These packages are great at providing editor shortcuts for editing
lisp. There are several things I want to change however. 
- I hate that is overrides =v=, as I use that character all the time
  for motions. I think I am going to delegate only =C-v= and =V= to
  the lispy functions and leave the rest untouched. probably should
  use a hydra.
- I am starting to think that I would be better off just using the
  evil lisp state, and then binding some of the most convient
  functions from both to the new state. Some of the evil-cleverparens
  functions are smarter then their equvilents in lispyville.
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :delight
    :hook emacs-lisp-mode
    :init
    (setq lispy-colon-p nil))

  (use-package lispyville
    :delight
    :hook lispy-mode
    :init
    (setq lispyville-key-theme
          '(operators
            c-w
            slurp/barf-cp
            additional
            additional-movement
            additional-insert
            additional-wrap
            mark)))
#+END_SRC

** Helm
helm is the more powerfull of the two between itself and ivy. I really
want to give Ivy a good try because it seems snappier on large files,
but there are still some issues that gives helm the advantage
- =helm-ag= supports out of order matching
- helm doesn't break when using "regex" characters in pattern
- helm is integrated with dired.
- helm supports marking files
- helm file sorting is more sane
- helm-mini has better recentf functionality
- helm supports frames, which makes swoop easier
- =counsel-fzf= is broken, but =helm-fzf= works great
- helm supports marking, which is very efficent.

my biggest beef with helm is that when using tramp it very slow. I
will have to look into seeing what can be done about that. But the
code is so intimidating. But thankfully I only use tramp about once a
week to copy some files, so it is not a big deal.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :general
    (:keymaps 'helm-map
              "C-j" 'helm-next-line
              "C-k" 'helm-previous-line
              "C-h" 'helm-next-source
              "C-S-h" 'describe-key
              "C-l" "RET"
              "C-z" 'helm-select-action
              "TAB" 'helm-execute-persistent-action)
    (:keymaps '(helm-find-files-map
                helm-read-file-map)
              "C-l" 'helm-execute-persistent-action
              "C-h" 'helm-find-files-up-one-level))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swoop)

  (use-package helm-ag)

*** org
use helm to quickly navigate org headings
#+BEGIN_SRC emacs-lisp
  ($leader-local-set-key
    :keymaps 'org-mode-map
    "j" 'helm-org-in-buffer-headings)

  (csetq helm-org-format-outline-path t)
#+END_SRC
#+END_SRC

** editing

general editing configuration. We only want to use tabs in specific major modes
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC


don't show me long lines in whitespace mode
#+BEGIN_SRC emacs-lisp
  (delq 'lines whitespace-style)
#+END_SRC

*** narrowing
#+BEGIN_SRC emacs-lisp
  ($leader-set-key
    "n" '(:ignore t :wk "narrow")
    "nw" 'widen
    "nr" 'narrow-to-region
    "nf" 'narrow-to-defun)
#+END_SRC
move me to the start of the line or start of code, based on heuristics
#+BEGIN_SRC emacs-lisp
  (use-package mwim
    :general
    (:states 'insert
             "C-e" 'mwim-end
             "C-a" 'mwim-beginning))
#+END_SRC

avy is an awesome jump to point package.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init
    (setq avy-timeout-seconds 0.3)
    (general-define-key
     :states '(normal visual)
     ";" 'avy-goto-char-timer)
    :config
    (evil-collection-init 'avy))
#+END_SRC

provides snippets for adding complex blocks. use it with =M-/=
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish
    :defer 3
    :config
    (let ((inhibit-message t))
      (yas-global-mode)))
  (use-package yasnippet-snippets
    :diminish
    :after yasnippet)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer 2
    :init
    (setq projectile-enable-caching t)
    :config
    (projectile-global-mode))

  (use-package counsel-projectile
    :init
    (push '((nil . "counsel-projectile") . (nil . "proj")) which-key-replacement-alist)
    ($leader-set-key
      "p" '(:ignore t :wk "project")
      "pp" 'counsel-projectile
      "pP" 'counsel-projectile-switch-project
      "ps" 'counsel-projectile-ag
      "pf" 'counsel-projectile-find-file
      "pb" 'counsel-projectile-switch-to-buffer
      "pd" 'counsel-projectile-find-dir))
#+END_SRC

** files

collection of functions stolen from spacemacs
#+BEGIN_SRC emacs-lisp
  (defun $copy-file ()
    (interactive)
    (let* ((destination (read-file-name "Write File: "))
           (dir (file-name-directory destination)))
      (unless (file-exists-p dir)
        (make-directory dir 'parents))
      (write-file destination 'confirm)))

  (defun $delete-file ()
    (interactive)
    (delete-file (buffer-file-name)))

  (defun $rename-file ()
    (interactive)
    (let* ((destination (read-file-name "Rename File: "))
           (dir (file-name-directory destination)))
      (unless (file-exists-p dir)
        (make-directory dir 'parents))
      (rename-file (buffer-file-name) destination)))

  (defun $find-user-config-file ()
    "Edit the org file we use for config, in the current window."
    (interactive)
    (find-file-existing (expand-file-name "emacs.org" user-emacs-directory)))

  ($leader-set-key
    "f" '(:ignore t :wk "files")
    "fe" '$find-user-config-file
    "fc" '$copy-file
    "fD" '$delete-file
    "fR" '$rename-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setq recentf-max-saved-items 500))
#+END_SRC

** git

don't ask about following symlinks
#+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
#+END_SRC

*** magit
magit is the best git porcelain that exists, so far as I can tell. we
need to set the git version to a newer version because the default at
intel is not support. Also the Trash at intel is only 100M so trashing
files can quickly fill up my home disk.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-git-executable "/usr/intel/pkgs/git/2.12.0/bin/git"
          magit-delete-by-moving-to-trash nil)
    ($leader-set-key
      "g" '(:ignore t :wk "git")
      "gs" 'magit-status
      "gb" 'magit-blame)

start teh commit message editor in insert state
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'with-editor
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

I don't like to commit to my github repos using my work credentials,
but I can't use those credentials on my work repos. therefore I set
~useconfigonly = true~ so that I have to set the credentials for every
repo. I can use these functions as short hand.
#+BEGIN_SRC emacs-lisp
  (defun $git-work-user ()
    "Set my work credentials"
    (interactive)
    (shell-command "git config --local user.name \"Hinckley, Troy J\" &&
     git config --local user.email troy.j.hinckley@intel.com"))

  (defun $git-private-user ()
    "Set my work credentials"
    (interactive)
    (shell-command "git config --local user.name CeleritasCelery &&
     git config --local user.email t.macman@gmail.com"))

  ($leader-set-key
    "gc" '(:ignore t :wk "credentials")
    "gcw" '$git-work-user
    "gcp" '$git-private-user)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :demand t
    :after magit
    :config
    (general-define-key
     :keymaps 'magit-mode-map
     "SPC" nil))

  (use-package git-timemachine
    :init
    ($leader-set-key
      "gt" 'git-timemachine))
#+END_SRC

*** git gutter
git gutter uses the the margin to display the git status. the frige
package uses the fringe instead of the margin. This means that it
won't conflict with linum-mode. However since I don't need linum mode
I can probably remove git gutter fringe all together. All the that it
would offer me is that I could display of the left side, which I may
want to do when I enable flycheck.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :defer 3
    :init
    (setq git-gutter:diff-option "-w")
    (defhydra $git-hunk (:exit nil)
      ("n" git-gutter:next-hunk "next")
      ("j" git-gutter:next-hunk "next")
      ("p" git-gutter:previous-hunk "prev")
      ("k" git-gutter:previous-hunk "prev")
      ("r" git-gutter:revert-hunk "revert")
      ("h" $git-gutter-show-hunk "show hunk" :exit t)
      ("s" git-gutter:stage-hunk "stage")
      ("v" git-gutter:mark-hunk "mark" :exit t))
    ($leader-set-key
      "gg" '$git-hunk/body)
    :config
    (global-git-gutter-mode))

  (use-package git-gutter-fringe
    :diminish
    :demand t
    :after git-gutter)
#+END_SRC

** shell
*** comint
comint is the generic backend for REPL's and shells. We are giving it
more bash-it style behavior where I can enter some text and then use
the previous command to match against it. Also we can use ivy to
search through the command history. also whenever we try to go to the
previous command it will automatically move us the the command line.
#+BEGIN_SRC emacs-lisp
  (use-package comint
    :straight nil
    :general
    (:keymaps 'comint-mode-map
              "C-k" 'comint-previous-matching-input-from-input
              "C-j" 'comint-next-matching-input-from-input
              "C-S-k" 'comint-previous-prompt
              "C-S-j" 'comint-next-prompt
              [remap comint-dynamic-list-input-ring] 'counsel-shell-history)
    :init
    (setq comint-scroll-to-bottom-on-input t
          comint-process-echoes t
          comint-prompt-read-only t))

  (defun $goto-cmd-line (&rest _)
    (goto-char (point-max)))

  (general-advice-add '(comint-next-matching-input-from-input
                        comint-previous-matching-input-from-input) :before '$goto-cmd-line)
#+END_SRC

*** shell
these are utility functions used to setting up the Emacs shell.
#+BEGIN_SRC emacs-lisp
  (use-package shell
    :straight nil
    :gfhook company-mode
    :init
    (setq shell-file-name "bash"))

  (defvar $dir-history nil
    "previous shell directories")
  (make-variable-buffer-local '$dir-history)

  (defun $select-shell-history ()
    (interactive)
    (goto-char (point-max))
    (insert (concat "cd " (string-remove-prefix (or (file-remote-p default-directory) "")
                                                (completing-read "directory:" $dir-history)))))

  (general-define-key
   :keymaps 'shell-mode-map
   "C-c C-j" '$select-shell-history)

  (defun $track-shell-directory (str)
    "use the proc filesytem to get the current directory.
    Works on remote shells as well if `shx' and `shx-cmd-set-pid' are used. The
    remote shell will need to echo it's PID in the rc file in the form of `shx'
    markup."
    (when (string-match comint-prompt-regexp str)
      (--when-let (-some->> ($get-shell-pid)
                            (format "/proc/%s/cwd")
                            (concat (file-remote-p default-directory))
                            file-symlink-p
                            cd)
        (unless (equal it (car $dir-history))
          (push it $dir-history))))
    str)

  (defun $get-shell-pid ()
    (or $shell-pid
        ;; we can only use the buffer process PID
        ;; with local shells
        (unless (file-remote-p default-directory)
          (-some->> (current-buffer)
                    get-buffer-process
                    process-id))))

  (defvar $shell-pid nil
    "Set this variable when the buffer process PID is not the shell PID.")
  (make-variable-buffer-local '$shell-pid)

  (defun shx-cmd-set-pid (pid)
    "(SAFE) sets env local shell PID.
  Add the following lines to (or equvilent) to your shell starup file

  echo \"<set-pid $$>\""
    (setq $shell-pid pid))

  (defun $supress-hostkey-warning (str)
    "EC machines issue a benign but really annoying warning that the EC people
    don't have the technical competence to fix. It has the following form:

    add_host_to_hostkeys: failed to open <missing path> - reason Permission denied "
    (if (string-match "add_host_to_hostkeys: failed to open" str) "" str))

  (defun $shell-mode-hook ()
    (shell-dirtrack-mode 0)
    (setq-local comint-prompt-regexp (rx bol "╰─→ " eos))
    (modify-syntax-entry ?= ".")
    (setq-local company-backends '(company-async-files (company-command company-env) company-fish company-capf company-dabbrev-code))
    (general-add-hook 'comint-preoutput-filter-functions
                      '($supress-hostkey-warning $track-shell-directory) nil 'local))
  (add-hook 'shell-mode-hook '$shell-mode-hook)

  (defun $tcsh-remote-shell (fn &rest args)
    (if (file-remote-p default-directory)
        (let ((shell-file-name "tcsh"))
          (apply fn args))
      (apply fn args)))

  (general-advice-add '(shell-pop shell) :around '$tcsh-remote-shell)
#+END_SRC

shx mode allows us to call emacs lisp functions from within the
builtin shell, gives us the best of both worlds.
#+BEGIN_SRC emacs-lisp
  (use-package shx
    :diminish
    :hook shell-mode)
#+END_SRC

the =EMACS_CAPTURE_ENV= is used as part of my tcshrc file to source
the proper env scripts so that all these variables are set
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :defer 6
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (exec-path-from-shell-initialize)

    (let ((exec-path-from-shell-shell-name "tcsh")
          (exec-path-from-shell-arguments nil))
      (setenv "EMACS_CAPTURE_ENV" "1")
      (exec-path-from-shell-copy-envs '("IP_MODELS"
                                        "IP_RELEASES"
                                        "GIT_REPOS"
                                        "GLOBAL_TOOLS"
                                        "RTLMODELS"
                                        "SPF_PERL_LIB"
                                        "SPF_ROOT"))
      (setenv "EMACS_CAPTURE_ENV" nil)))
#+END_SRC

*** shell pop
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :init
    ;; https://github.com/kyagi/shell-pop-el/issues/51
    (add-to-list 'shackle-rules `(,(rx "*shell*") :regexp t :same t))
    ($leader-set-key
      "'" 'shell-pop)
    :config
    (advice-add 'shell-pop--cd-to-cwd
                :before-until (defun $shell-in-cwd-p (cwd)
                                (file-equal-p default-directory cwd)))

    (advice-add 'shell-pop--cd-to-cwd
                :after (defun $scroll-shell-pop (_)
                         (scroll-down 1))))
#+END_SRC

I wrote this package to do async file completion. This is especially
true when using this in a shell, where you don't want to block the ui
while typing.
#+BEGIN_SRC emacs-lisp
  (use-package company-async-files
    :after company
    :straight
    (company-async-files
     :type git :host github :repo "CeleritasCelery/company-async-files")
    :init
    (add-to-list 'company-backends 'company-async-files)
    (delete 'company-files company-backends))
#+END_SRC

*** fish completion
this is a package that I wrote to fallback on fish shell for
completion candidates. I think at some point I would like to
reimplement that argument parsing functionality in lisp and remove the
dependacey on fish.
#+BEGIN_SRC emacs-lisp
  (use-package company-fish
    :after company
    :straight
    (company-fish
     :type git :host github :repo "CeleritasCelery/company-fish")
    :init
    (add-to-list 'company-backends 'company-fish))
#+END_SRC

*** local env
These packages will be loaded by shell-mode. They let me share the
environment of my local process with the buffer. very useful.
#+BEGIN_SRC emacs-lisp
  (use-package local-env
    :straight
    (local-env :type git
               :host github
               :repo "CeleritasCelery/local-env-mode"
               :files ("local-env.el")))

  (use-package company-env
    :straight
    (company-env :type git
                 :host github
                 :repo "CeleritasCelery/local-env-mode"
                 :files ("company-env.el")))

  (use-package company-command
    :straight
    (company-command :type git
                     :host github
                     :repo "CeleritasCelery/local-env-mode"
                     :files ("company-command.el")))
#+END_SRC

** compilation
packages that assist in compiling and building code

compilation mode will throw these warnings when clearing large buffers
so we supress them
#+BEGIN_SRC emacs-lisp
  (setq warning-suppress-types '(undo discard-info))
#+END_SRC

*** compile
#+BEGIN_SRC emacs-lisp
  (use-package compile
    :straight nil
    :init
    (setq compilation-auto-jump-to-first-error t)
    :config
    (evil-collection-init 'compile)
    (general-define-key
     :keymaps 'compilation-mode-map
     "SPC" nil)
    (font-lock-add-keywords 'compilation-mode
                            `((,(rx bol (0+ space)
                                    (group "#" (0+ nonl)))
                               1 'font-lock-comment-face)
                              (,(rx bol
                                    (group-n 2
                                             (group-n 1 (any "*="))
                                             (1+ (backref 1)))
                                    eol)
                               2 'font-lock-comment-face)
                              (,(rx bol (0+ space)
                                    (group (1+ "-"))
                                    eol)
                               1 'font-lock-comment-face)))
    (add-hook 'compilation-filter-hook
              (defun $compilation-apply-ansi-color ()
                (ansi-color-apply-on-region compilation-filter-start (point))))) 
#+END_SRC

compillation can either be run in =compilation-mode= or in
=comint-mode= with =compilation-shell-minor-mode= enabled. The later
is needed when we want to interact with the running process. This has
a few issues that we are going to resolve now:

1. There is a weird issue where the recompile buffer is not the same
   as the original buffer. Therefore we force the buffer name to remain the same by overriding the =compilation-arguments=.

2. It is really convient to dismiss the compilation window with =q= so
   we are going to bind that. regular compilation-mode supports this
   binding by default.

3. We want to start in normal state, so we easily dismiss the
   window with =q= right when it first pops up if we want.
#+BEGIN_SRC emacs-lisp
  (defun $run-ipgen (arg)
    "run dft ipgen in the current model"
    (interactive "P")
    (let* ((model-root (vc-git-root default-directory))
           (ipgen (f-join model-root "tools/ipgen/"))
           (dut (completing-read "select DUT: "
                                 (-map 'f-filename
                                       (f--directories ipgen (member "setup" (directory-files it))))))
           (default-directory (f-join ipgen dut))
           (compilation-environment (list (concat "MODEL_ROOT=" model-root)))
           (compilation-buffer-name-function
            (lambda (mm)
              (concat "*" (f-filename model-root) " " dut " ipgen "  (downcase mm) "*"))))
      (compile (concat "source setup && $DFT_REPO_ROOT/DFTNetworkGen/run_dft_ipgen"
                       (if arg " -B" "") " && touch ./post_ipgen && python ./post_ipgen"))))

  (defhydra bman-cmd (:exit t :columns 2)
    "run a bman command"
    ("a" ($run-bman "") "all")
    ("l" ($run-bman "-s all +s lintra") "lintra")
    ("v" ($run-bman "-s all +s vcs") "vcs")
    ("e" ($run-bman "-s all +s espfmodel") "espf")
    ("c" ($run-bman "-s all +s sglp") "spyglass compile")
    ("s" ($run-bman "-s all +s sgdft") "spyglass")
    ("r" ($run-bman "-s emu -s sgdft -s sglp -s sglp_legacy -s lintra_ol -s FLG -s hip_listgen -s lintra") "RTL only"))

  (defun $run-bman (filter)
    "run dft ipgen in the current model"
    (let* ((model-root (file-truename (vc-git-root default-directory)))
           (compilation-environment (list (concat "MODEL_ROOT=" model-root)))
           (compilation-buffer-name-function
            (lambda (mm)
              (concat "*" (f-filename model-root) " bman " (downcase mm) "*"))))
      (compile (concat "source /p/hdk/rtl/hdk.rc -cfg shdk74 && bman -dut mdf_10nm " filter))))

  ($leader-set-key
    "C" '(:ignore t :wk "compile")
    "Cb" 'bman-cmd/body
    "Ci" '$run-ipgen
    "Cc" 'compile)
#+END_SRC

*** utility
we are doing two things here to make compliation more convient

1. we want to compile with tcsh because that is the standard login shell
for EC machines and some of the compilation setup scripts require it,
we could make it work with bash, but this is easier.

2. by setting the compliation root, we can ensure that we are only
prompted to save buffers that actaully exist in the project instead of
it trying prompt us to save all buffers.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'compile
    (defun $compile-with-tcsh (fn &rest args)
      "use tcsh (standard intel shell) for compilation"
      (let ((shell-file-name "tcsh"))
        (apply fn args)))

    (defvar $current-compilation-dir nil
      "root of current compliation")

    (defun $set-compilation-dir (&rest _)
      "set the root of the current compilation"
      (setq $current-compilation-dir default-directory))

    (setq compilation-save-buffers-predicate
          (lambda ()
            (when-let ((root (vc-git-root (buffer-file-name)))
                       (comp-root (vc-git-root $current-compilation-dir)))
              (f-same? comp-root root))))

    (general-advice-add '(compile recompile) :around #'$compile-with-tcsh)
    (general-advice-add '(compile recompile) :before #'$set-compilation-dir))
#+END_SRC

we need to define what errors look like in compilation and log
files. compilation mode has some defaults but they are not really
applicable to us. Also the built in verilog mode tries to add all of
its error regexp's to the alist everytime it is loaded. This results
in a lot of extra processing that we don't want. Therefore we remove
that hook and set the alist back to our canonical version.
#+BEGIN_SRC emacs-lisp
  (defvar $compilation-error-regexp-alist nil
    "The canonical error regexp alist")

  (with-eval-after-load 'compile
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(ipgen-gmake ,(rx bol "gmake" (optional "[1]") ": *** [" (group-n 1 (1+ nonl)) "] Error " digit) 1))
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(core-assembler ,(rx bol "Information: script '" (group-n 1 (1+ (not (any "'"))))
                                       "'\n" (1+ space) "stopped at line " (group-n 2 (1+ digit)) (1+ nonl)) 1 2))
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(connection-error ,(rx bol (optional "-I-:") "Error: " (group-n 3 (1+ nonl))
                                         "\n" (optional "-I-:") "-" (or "E" "F") "-: [CRT-" (1+ digit) "] Error in "
                                         (1+ nonl) " file " (group-n 1 (1+ (not (any space)))) (0+ space)
                                         "\n" (optional "-I-:") " Error at line# " (group-n 2 (1+ digit)) (1+ nonl))
                                    1 2 nil nil nil (3 font-lock-warning-face)))
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(bman-verilog ,(rx bol "-I-:Error-" (1+ nonl)
                                     "\n-I-:" (group-n 1 (1+ (not space))) ", " (group-n 2 (1+ digit))) 1 2))
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(bman-stage ,(rx bol "-" (or "E" "I") "-:" (optional space) "FAILED:"  (1+ nonl) (or ";" ":") " LOG " (optional ": ") (group (1+ (not space)))) 1))
    (add-to-list 'compilation-error-regexp-alist-alist
                 `(ipgen-hdl-copy ,(rx bol "-I-:Error-[MPD] Module previously declared"
                                       "\n-I-:  The module was previously declared at: "
                                       "\n-I-:  \"" (group (1+ (not space))) "/" (1+ (not space)) (or ".vs" ".sv") "\",") (1 "%s/dft_ipgen.hdl")))


    (setq $compilation-error-regexp-alist '(ipgen-hdl-copy ipgen-gmake core-assembler connection-error bman-stage bman-verilog))
    (setq compilation-error-regexp-alist $compilation-error-regexp-alist))

  (with-eval-after-load 'verilog-mode
    (remove-hook 'compilation-mode-hook 'verilog-error-regexp-add-emacs)
    (setq compilation-error-regexp-alist $compilation-error-regexp-alist))
#+END_SRC

*** alert
the alert package lets us creat notification for any event we want. In
this case we are intersted in knowing when a compliation finishes or
stalls.
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :init
    (setq alert-default-style 'fringe))

  (add-hook 'compilation-filter-hook
            (defun $complilation-detect-core-assembler-stall ()
              "termiate compilation when core assembler stalls"
              (when (looking-back (rx bol "CoreAssembler> ") (line-beginning-position))
                (alert "Core Assembler stall"
                       :severity 'moderate))))

  (setq compilation-finish-functions
        (list (defun $notify-compile-done (buffer exit-string)
                "notfiy the user that compliation is finished"
                (alert "compliation finished"
                       :severity (if (string-prefix-p "exited abnormally" exit-string)
                                     'high
                                   'normal)))))
#+END_SRC


* Languages
:PROPERTIES:
:VISIBILITY: children
:END:
** General
#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
#+END_SRC


*** company
I don't want to use return for completion because that often
interferces with just regular typing. So i have gotten in the habit of
just using =C-l=
#+BEGIN_SRC emacs-lisp
  (use-package company
    :delight
    :general
    (:keymaps 'company-active-map
              "RET" nil
              [return] nil
              "C-l" 'company-complete-selection)
    :hook '(prog-mode org-mode)
    :init
    (setq company-idle-delay 0.2
          evil-collection-company-use-tng nil)
    (evil-collection-init 'company))

  (use-package company-statistics
    :demand t
    :after company
    :config
    (company-statistics-mode))

  (use-package company-shell
    :after company)
#+END_SRC

** Org
*** todos and general
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :gfhook org-indent-mode $org-truncate-lines
    :init
    ($leader-local-set-key
      :keymaps 'org-mode-map
      "," 'org-edit-special
      "g" '$org-navigate/body)
    (setq org-enforce-todo-dependencies t
          org-todo-keywords '((sequence "TODO(t)" "BLOCK(b@!)" "DOING(g)" "|" "DONE(d)")
                              (sequence "|" "CANCELED(c@)"))
          org-priority-faces '((?A . (:foreground "OrangeRed"))
                               (?B . (:foreground "yellow3"))
                               (?C . (:foreground "ForestGreen"))))
    (defun $org-truncate-lines ()
      (let ((inhibit-message t))
        (toggle-truncate-lines)))
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" ""))
    (defhydra $org-navigate ()
      "navigate through org headers"
      ("J" org-next-visible-heading "next heading")
      ("K" org-previous-visible-heading "prev heading")
      ("j" org-forward-element "foward")
      ("k" org-backward-element "back")
      ("h" org-up-element "up")
      ("l" org-down-element "down")
      ("<tab>" org-cycle "cycle")))
#+END_SRC

*** functions
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :config
    (general-advice-add '(org-capture-place-template org-edit-src-code)
                        :around (defun $suppress-delete-other-windows (orig-fn &rest args)
                                  (cl-letf (((symbol-function 'delete-other-windows)
                                             (symbol-function 'ignore)))
                                    (apply orig-fn args))))

    (defun $org-show-current-heading-tidily ()
      "Show next entry, keeping other entries closed."
      (interactive)
      (if (save-excursion (end-of-line) (outline-invisible-p))
          (progn (org-show-entry) (show-children))
        (outline-back-to-heading)
        (unless (and (bolp) (org-on-heading-p))
          (org-up-heading-safe)
          (hide-subtree)
          (error "Boundary reached"))
        (org-overview)
        (org-reveal t)
        (org-show-entry)
        (show-children)))
    (advice-add 'counsel-org-goto :after '$org-show-current-heading-tidily)

    (defun $org-archive-done-tasks ()
      "move tasks that are completed to the archive file."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "/DONE" 'file)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "/CANCELED" 'file))

    ($leader-local-set-key
      :keymaps 'org-mode-map
      "a" '$org-archive-done-tasks
      "h" '$org-show-current-heading-tidily)

    (defun $org-smart-return ()
      "if in a list return should add a new item. If the item is
  blank, we want to break out of the list and delete the blank
  item"
      (interactive)
      (if (org-at-item-p)
          (if (and (looking-back (rx space) (- (point) 1))
                   (memq (- (point) (org-in-item-p))
                         (number-sequence 1 3)))
              ;; If at a blank item, delete it
              (progn
                (beginning-of-line)
                (kill-line)
                (insert "\n")
                (org-return))
            ;; If at a non-blank item, insert a new item
            (org-return)
            (org-insert-item))
        ;; If not at item, normal return
        (org-return)))
    (general-define-key
     :keymaps 'org-mode-map
     "<ret>" '$org-smart-return
     "RET" '$org-smart-return)

    (defun $org-procrastinate (arg)
      "shedule the selected item for tomrrow, effectivly removing
  it from todays agenda."
      (interactive "P")
      (let ((fn (if (eq major-mode 'org-agenda-mode)
                    'org-agenda-schedule
                  'org-schedule)))
        (funcall fn arg "+1d")))
    ($leader-local-set-key
      :keymaps '(org-mode-map org-agenda-mode-map)
      "s" '$org-procrastinate))
#+END_SRC

*** agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :straight nil
    :init
    (setq org-agenda-todo-ignore-scheduled 'future
          org-agenda-dim-blocked-tasks 'invisible
          org-agenda-files "~/org/.agenda-files"
          org-agenda-custom-commands '(("f" tags-todo "mdf-pvim|snr|gen")
                                       ("d" tags-todo "dev")
                                       ("p" tags-todo "pvim+now")))
    ($leader-set-key
      "a" 'org-agenda))
#+END_SRC

*** clock
#+BEGIN_SRC emacs-lisp
  (use-package org-clock
    :straight nil
    :init
    ($leader-local-set-key
      :keymaps 'org-mode-map
      "i" 'org-clock-in
      "o" 'org-clock-out)
    ($leader-local-set-key
      :keymaps 'org-agenda-mode-map
      "i" 'org-agenda-clock-in
      "o" 'org-agenda-clock-out))
#+END_SRC

*** export
#+BEGIN_SRC emacs-lisp
  (use-package ox
    :straight nil
    :init
    (setq org-export-with-section-numbers nil
          org-export-with-toc nil
          org-export-with-sub-superscripts '{}
          org-export-with-priority t
          org-export-preserve-breaks t
          org-html-postamble nil)
    :config
    (setq org-html-head
          (concat
           "<style type=\"text/css\">\n"
           "<!--/*--><![CDATA[/*><!--*/\n"
           (with-temp-buffer
             (insert-file-contents
              "~/org/org-html-themes/styles/email/css/email.css")
             (buffer-string))
           "/*]]>*/-->\n"
           "</style>\n")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

*** capture
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :straight nil
    :init
    ($leader-set-key
      "c" 'org-capture)
    ($leader-local-set-key
      :definer 'minor-mode
      :keymaps 'org-capture-mode
      "e" '$export-org-email)
    :config
    (setq org-default-notes-file (expand-file-name "notes.org" org-directory)
          org-default-email-file (expand-file-name "email.org" org-directory)
          org-default-journal-file (expand-file-name "journal.org" org-directory)
          org-capture-templates
          '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
             "* TODO [#B] %?\n %t\n" :empty-lines 1)
            ("l" "Todo Link" entry (file+headline org-default-notes-file "Tasks")
             "* TODO [#B] %?\n %i\n %a" :empty-lines 1)
            ("s" "Scheduled TODO" entry (file+headline org-default-notes-file "Tasks")
             "* TODO [#B] %?\n  SCHEDULED: %^T\n" :empty-lines 1)
            ("T" "Todo from Clipboard" entry (file+headline org-default-notes-file "Tasks")
             "* TODO [#B] %?\n  %c" :empty-lines 1)
            ("n" "Note" entry (file+headline org-default-notes-file "Notes")
             "* %?" :empty-lines 1)
            ("N" "Note with Clipboard" entry (file+headline org-default-notes-file "Notes")
             "* %?\n   %c" :empty-lines 1)
            ("e" "Email" entry (file org-default-email-file)
             "* %?" :empty-lines 1)
            ("j" "Journal" entry (file org-default-journal-file)
             "* %<%a %b %e, %l:%M> -  %?" :empty-lines 1))))

     (defun $export-org-email ()
       "Export the current org email and copy it to the clipboard"
       (interactive)
       (let ((org-export-show-temporary-export-buffer nil))
         (org-html-export-as-html)
         (with-current-buffer "*Org HTML Export*"
           (kill-new (buffer-string)))
         (message "HTML copied to clipboard")))
#+END_SRC

*** src blocks
#+BEGIN_SRC emacs-lisp
  (use-package org-src
    :straight nil
    :init
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t)
#+END_SRC

*** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :delight
    :hook org-mode
    :init (add-hook 'org-insert-heading-hook 'evil-insert-state))

  (use-package evil-org-agenda
    :straight nil
    :commands evil-org-agenda-set-keys
    :hook (org-agenda-mode . evil-org-agenda-set-keys))

  (defun $org-todo-or-evil-t ()
    "change the org todo state or evil's till operator"
    (interactive)
    (if (org-at-heading-p)
        (org-todo)
      (call-interactively 'evil-snipe-t)))

  (general-define-key
   :keymaps 'org-mode-map
   :states 'normal
   "t" '$org-todo-or-evil-t)
#+END_SRC

*** visuals
These packages are used to make org mode look better and take
advantage of unicode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook org-mode)

  (use-package org-fancy-priorities
    :diminish
    :hook org-mode
    :init
    (setq org-fancy-priorities-list '("⬆" "⬅" "⬇" "☕")))
#+END_SRC

*** dispatcher
https://gist.github.com/dfeich/1df4e174d45f05fb5798ca514d28c68a
provide a hydra dispatcher based on context
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :init
    ($leader-local-set-key
      :keymaps 'org-mode-map
      "d" '$context-hydra-launcher)
    :config
    (defun $context-hydra-launcher ()
      "A launcher for hydras based on the current context."
      (interactive)
      (let* ((elem (org-element-context))
             (etype (car elem))
             (type (org-element-property :type elem)))
        (cl-case etype
          (src-block (hydra-babel-helper/body))
          (link (hydra-org-link-helper/body))
          ((table-row table-cell) (hydra-org-table-helper/body) )
          (t (message "No specific hydra for %s/%s" etype type)
             (hydra-org-default/body)))))

  ;;; *** org mode hydras
    (defhydra hydra-org-default (:color pink :hint nil)
      "
  Org default hydra
  _s_ insert src block ref with helm
  _q_ quit
  "
      ("s" helm-lib-babel-insert :color blue)
      ("q" nil :color blue))


    (defhydra hydra-org-link-helper (:color pink :hint nil)
      "
  org link helper
  _i_ backward slurp     _o_ forward slurp    _n_ next link
  _j_ backward barf      _k_ forward barf     _p_ previous link
  _q_ quit
  "
      ("i" org-link-edit-backward-slurp)
      ("o" org-link-edit-forward-slurp)
      ("j" org-link-edit-backward-barf)
      ("k" org-link-edit-forward-barf)
      ("n" org-next-link)
      ("p" org-previous-link)
      ("q" nil :color blue))

    (defhydra hydra-org-table-helper (:color pink :hint nil)
      "
  org table helper
  _r_ recalculate     _w_ wrap region      _c_ toggle coordinates
  _i_ iterate table   _t_ transpose        _D_ toggle debugger
  _B_ iterate buffer  _E_ export table     _d_ edit field
  _e_ eval formula    _s_ sort lines
  _q_ quit
  "
      ("E" org-table-export :color blue)
      ("s" org-table-sort-lines)
      ("d" org-table-edit-field)
      ("e" org-table-eval-formula)
      ("r" org-table-recalculate)
      ("i" org-table-iterate)
      ("B" org-table-iterate-buffer-tables)
      ("w" org-table-wrap-region)
      ("D" org-table-toggle-formula-debugger)
      ("t" org-table-transpose-table-at-point)
      ("c" org-table-toggle-coordinate-overlays :color blue)
      ("q" nil :color blue))

    (defhydra hydra-babel-helper (:color pink :hint nil)
      "
  org babel src block helper functions
  _n_ next       _i_ info           _I_ insert header
  _p_ prev       _c_ check
  _h_ goto head  _E_ expand
  ^ ^            _s_ split
  _q_ quit       _r_ remove result  _e_ examplify region
  "
      ("i" org-babel-view-src-block-info)
      ("I" org-babel-insert-header-arg)
      ("c" org-babel-check-src-block :color blue)
      ("s" org-babel-demarcate-block :color blue)
      ("n" org-babel-next-src-block)
      ("p" org-babel-previous-src-block)
      ("E" org-babel-expand-src-block :color blue)
      ("e" org-babel-examplify-region :color blue)
      ("r" org-babel-remove-result :color blue)
      ("h" org-babel-goto-src-block-head)
      ("q" nil :color blue))

    )
#+END_SRC

** lisp

*** elisp
#+BEGIN_SRC emacs-lisp
  (use-package emacs-lisp
    :straight nil
    :init
    ($leader-local-set-key
      :keymaps 'emacs-lisp-mode-map
      "'" 'ielm
      "eb" 'eval-buffer
      "er" 'eval-region
      "ef" 'eval-defun))
#+END_SRC

never have to worry about tab indenting again.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook emacs-lisp-mode)
#+END_SRC

set TRAMP verbosity to warnings and errors only. default is level 3
which sends a message every time we connect to a remote host
https://emacs.stackexchange.com/questions/29286/tramp-unable-to-open-some-files
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :straight nil
    :init
    (setq tramp-default-method "ssh"
          tramp-default-user "tjhinckl"
          tramp-verbose 4
          helm-tramp-connection-min-time-diff 1
          tramp-inline-compress-start-size 1000000
          tramp-copy-size-limit 1000000)
    :config
    (tramp-set-completion-function "ssh" '((tramp-parse-hosts "~/.ssh2/ssh2_config"))))
#+END_SRC

packages to help manage parens
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook prog-mode)

  (use-package paren
    :straight nil
    :demand t
    :after prog-mode
    :init
    (setq evil-show-paren-range 3)
    (evil-collection-init 'paren)
    :config
    (show-paren-mode))
#+END_SRC

** perl
all the enviroment variables are set so as to make it easier for
flycheck to get a clean compile.
#+BEGIN_SRC emacs-lisp
  (use-package cperl
    :straight nil
    :init
    (setq flycheck-perl-executable "/usr/intel/pkgs/perl/5.14.1/bin/perl"
          flycheck-perl-perlcritic-executable "/usr/intel/pkgs/perl/5.14.1-threads/bin/perlcritic"
          flycheck-perl-include-path '("/p/hdk/cad/spf/latest/lib/perl5" ;; SPF library
                                       "../lib/perl5" ;; DTEG ultiscan
                                       "../../lib/perl5" ;; DTEG STF
                                       "..")) ;; library files need to see the library ¯\_(ツ)_/¯
    (setenv "VALID_ROOT" "/p/hdk/rtl/valid/shdk74")
    (setenv "VTLIB" "/p/hdk/rtl/valid/shdk74/lib")
    (setenv "SPF_PERL_LIB" "/p/hdk/cad/spf/latest/lib/perl5")
    (setenv "GLOBAL_TOOLS" "/nfs/site/proj/dpg/tools")
    (setenv "XWEAVE_REPO_ROOT" "/p/hdk/rtl/ip_releases/shdk74/xweave/v17ww43a")
    (setenv "IDS_HOME" "/p/hdk/rtl/cad/x86-64_linux26/dteg/ideas_shell/0.15.1")

    ;; ISC required variables
    (setenv "RTL_CAD_ROOT" "/p/hdk/rtl/cad/x86-64_linux26")
    (setenv "RTL_PROJ_CFG" "/p/hdk/rtl/proj_tools/proj_cfg")
    (setenv "CFG_PROJECT" "shdk74")
    (setenv "RTL_PROJ_BIN" "/p/hdk/rtl/proj_tools/proj_binx/shdk74/latest")
    (setenv "RTL_PROJ_TOOLS" "/p/hdk/rtl/proj_tools"))
#+END_SRC

** json
add hide-show support to json mode and make comments properly font
locked
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :config
    (add-to-list 'hs-special-modes-alist (list 'json-mode (rx (any "{[")) (rx (any "]}")) (rx "/" (any "/*"))))
    (font-lock-add-keywords 'json-mode
                            `((,(rx (group "//" (0+ nonl)) eol) 1 font-lock-comment-face))))
#+END_SRC

we are using the design_report.json as reference for our json coding
standard. This varies from the standard json Emacs json pretty printer in
the following ways:
- add a space before plist seperators
- use empty objects ={}= instead of =null=. null causes the json
  reader to choke
- indentation level is 4

#+BEGIN_SRC emacs-lisp
  (setq json-encoding-default-indentation "    ")

  (advice-add 'json-pretty-print :after
              (defun $json-convert-null-to-emtpy-obj (beg end)
                (save-excursion
                  (goto-char beg)
                  (while (re-search-forward (rx ": null") end 'noerror)
                    (replace-match ": {}")))))


  (el-patch-defun json-encode-alist (alist)
    "Return a JSON representation of ALIST."
    (when json-encoding-object-sort-predicate
      (setq alist
            (sort alist (lambda (a b)
                          (funcall json-encoding-object-sort-predicate
                                   (car a) (car b))))))
    (format "{%s%s}"
            (json-join
             (json--with-indentation
              (mapcar (lambda (cons)
                        (format (if json-encoding-pretty-print
                                    (el-patch-swap "%s%s: %s" "%s%s : %s")
                                  "%s%s:%s")
                                json--encoding-current-indentation
                                (json-encode-key (car cons))
                                (json-encode (cdr cons))))
                      alist))
             json-encoding-separator)
            (if (or (not json-encoding-pretty-print)
                    json-encoding-lisp-style-closings)
                ""
              json--encoding-current-indentation)))
#+END_SRC
** other
collection of major modes that I use for different file types.
#+BEGIN_SRC emacs-lisp
  (use-package major-modes
    :straight
    (major-modes
     :type git :host github :repo "CeleritasCelery/major-modes")
    :init
    ($leader-local-set-key
      :keymaps 'spfspec-mode-map
      "g" 'spfspec-goto-definition))
#+END_SRC
