 #+TITLE: Emacs Literate Configuration
#+AUTHOR: Troy Hinckley
#+PROPERTY: header-args :tangle yes


* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** About this file
This is an Emacs literate configuration. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Troy Hinckley"
        user-mail-address "t.macman@gmail.com")
#+END_SRC


** Emacs Initialization

*** Settings

The location of all cached files that save history between runs
#+BEGIN_SRC emacs-lisp
  (defvar $cache-directory (expand-file-name "cache" user-emacs-directory)
    "The location of all save and restore type files")
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defvar $leader-key "SPC"
    "leader key used to quicky access commands.")

  (defvar $mm-leader-key ","
    "leader key for major mode specific commands")
#+END_SRC
don't use menu or scroll bars. We want the UI to be as clean as
possible.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq inhibit-startup-screen t)
  (toggle-frame-fullscreen)
  (add-hook 'focus-in-hook 'redraw-display)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

use =y= and =n= instead of =yes= and =no=
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** tangling
    we want to tangle on exit so that it will make startup time
    quicker.
#+BEGIN_SRC emacs-lisp
  (defun $tangle-init-file ()
    "tangle my emacs org file before closing to make startup faster."
    (require 'ob-tangle)
    (org-babel-tangle-file (expand-file-name "emacs.org" user-emacs-directory)
                           (expand-file-name "emacs.el" user-emacs-directory)))

  (add-hook 'kill-emacs-hook '$tangle-init-file)
#+END_SRC

    by setting the initial mode we won't have to load lisp at startup
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC
* Packages
:PROPERTIES:
:VISIBILITY: children
:END:

** Package Manager
We are going to use =straight.el= as package manager because it allows
us to easily maintain private repos of packages. There is bootstrap
code on the website, but I could not get it to work behind the proxy
so I cloned it myself.  I will see later if I can get the bootstrap
install code to work.

I also byte-complied the bootstrap file which
shaves about 500 ms of the startup time.

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "straight/repos/straight.el/bootstrap" user-emacs-directory) nil 'nomessage)
#+END_SRC

** Use-package

=use-package= is a macro that allows to easily define and load other packages.
It is the first thing we want to install. I am using my own fork of the package
that contains more sane defaults for the =:hook= keyword.

#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(use-package
      :type git :host github :repo "CeleritasCelery/use-package"
      :upstream (:host github
                       :repo "jwiegley/use-package")))
#+END_SRC

Setting =straight-use-package-by-default= to =t= we can ensure that
=use-pacakge= will use =straight.el= to install missing packages for us. Always
defer and always ensure will guarntee that all dependaceies are loaded and that
packages are autoloaded unless explicitly stated otherwise.
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t
        use-package-always-defer t
        use-package-always-ensure t)
#+END_SRC

This allows us to remove mode-line lighters
#+BEGIN_SRC emacs-lisp
  (use-package delight)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC

** bootstrap
packages that are used to setup the my emacs enviroment

This package lets us use "SPC" as leader key for other
keybindings.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-create-definer $leader-set-key
      :prefix $leader-key
      :states 'motion
      :keymaps 'override)
    (general-create-definer $leader-local-set-key
      :prefix $mm-leader-key
      :states 'motion))
#+END_SRC

Use tab for indentation and symbol completion
#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(insert normal visual)
                      "TAB" 'indent-for-tab-command)
  (setq tab-always-indent 'complete)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setq recentf-save-file (expand-file-name "recentf" $cache-directory)
          recentf-max-saved-items 500))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :straight nil
    :demand t
    :init
    (setq savehist-file (expand-file-name "minibuffer_history" $cache-directory))
    :config
    (savehist-mode))
#+END_SRC

** UI
packages that used to improve the visuals and interface for Emacs

Setup the font that I want to use
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Hasklig"
                    :height 110)
#+END_SRC

Creating a collection of themes that I like. I can use
=counsel-load-themes= to switch between them
#+BEGIN_SRC emacs-lisp
  (use-package challenger-deep-theme)
  (use-package gruvbox-theme)
  (use-package darktooth-theme)
  (use-package spacemacs-theme)
  (use-package dracula-theme)
  (use-package moe-theme)
  (use-package doom-themes)
  (use-package solarized-theme)
  (use-package color-theme-sanityinc-tomorrow)
  (use-package noctilux-theme)
  (use-package flatland-theme)
  (use-package monokai-theme)
  (add-to-list 'custom-theme-load-path
               "/nfs/site/home/tjhinckl/.emacs.d/straight/build/moe-theme/")
  (load-theme 'darktooth t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight
    :demand t
    :init
    (setq which-key-idle-delay 0.5
          which-key-idle-secondary-delay 0.1
          which-key-allow-evil-operators t)
    :config
    (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (setq aw-dispatch-always t
          aw-background nil
          aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    ($leader-set-key
      "w" 'ace-window)
    :config
    (add-to-list 'aw-dispatch-alist '(?w $toggle-maximize-window)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :demand t
    :init
    (setq shackle-rules
          '((help-mode :select t)
            (ielm-mode :popup t)))
    :config
    (shackle-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package init-display
    :straight (init-display
               :local-repo "init-display")
    :init
    ($leader-set-key
      "TAB" '$alternate-buffer
      "fe" '$find-user-config-file
      "b" '(:ignore t :wk "buffers")
      "bs" '$open-scratch-buffer
      "q" '(:ignore t :wk "quit")
      "qq" '$quit-emacs))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :init
    ($leader-set-key
      "qr" 'restart-emacs))

#+END_SRC

#+BEGIN_SRC emacs-lisp

  ($leader-set-key
    "q" '(:ignore t :wk "quit")
    "qq" '$quit-emacs)
#+END_SRC

changing the volume on my mic triggers these bindings.
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "<XF86AudioLowerVolume>" 'ignore
   "<XF86AudioRaiseVolume>" 'ignore)
#+END_SRC

** Ivy

#+BEGIN_SRC emacs-lisp
  (defvar $use-ivy nil
    "use Ivy for completion")
  (defvar $use-helm t
    "use helm for completion")
#+END_SRC

I feel like ivy is simpler to setup so I am going to give it a try. I am going
to have to try to fix =counsel-ag= out of order matching if I want to live with
it though.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight
    (ivy
     :type git :host github :repo "CeleritasCelery/swiper"
     ;; a:files (:defaults (:exclude "swiper.el" "counsel.el" "ivy-hydra.el") "doc/ivy-help.org")
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :delight
    :general
    (:keymaps 'ivy-minibuffer-map
              "C-j" 'ivy-next-line
              "C-k" 'ivy-previous-line
              "C-h" "DEL"
              "C-S-H" help-map
              "C-l" 'ivy-alt-done
              "<C-return>" 'ivy-immediate-done
              ;; "TAB" 'ivy-alt-done
              )
    :init
    (setq ivy-height 15
          ivy-use-virtual-buffers t
          ivy-extra-directories nil
          ivy-use-selectable-prompt t
          ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    ($leader-set-key
      "bb" 'ivy-switch-buffer
      "r" 'ivy-resume)
    :config
    (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :straight
    (ivy-hydra
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    ;; :demand t
    :after (ivy hydra))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight
    (swiper
     :files ("swiper.el")
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :init
    ($leader-set-key
      "s" '(:ignore t :wk "search")
      "ss" 'swiper))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight
    (counsel
     :type git :host github :repo "CeleritasCelery/swiper"
     :upstream (:host github
                      :repo "abo-abo/swiper"))
    :delight
    :init
    ($leader-set-key
      "ff" 'counsel-find-file
      "sf" 'counsel-ag
      "SPC" 'counsel-M-x)
    :config
    (counsel-mode))
#+END_SRC

This package makes =ivy-switch-buffer= behave more like =helm-mini=
(i.e. displays the buffer type and full path to recentf files)
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :demand t
    :after ivy
    :config
    (setq ivy-virtual-abbreviate 'full
          ivy-rich-switch-buffer-align-virtual-buffer t)
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))
#+END_SRC

smex is an enchanced version of =M-x= that will record history and is
integrated into ivy
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (setq smex-history-length 32
          smex-save-file (expand-file-name "smex-items" $cache-directory)))
#+END_SRC

** evil
evil is the Extensible VI Layer. It gives us all the power of vim
without the draw back of using vimscript for config.

Evil will be loaded by one of it's dependacey packages. We need to set
=evil-want-integration= before loading evil so that =evil-collection= can
overide the modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration nil
          evil-kill-on-visual-paste nil
          evil-search-module 'evil-search
          evil-magic 'very-magic ;; make evil search regex more PCRE compatible
          evil-want-C-u-scroll t
          evil-want-C-d-scroll t
          evil-want-C-w-delete t
          evil-want-C-i-jump t
          evil-ex-search-vim-style-regexp t)
    :config
    (general-swap-key nil 'motion "0" "^")
    (evil-mode 1))
#+END_SRC

=C-i= can be used to move forward in cursor jumps, but Emacs binds it to =TAB=, so
we rebinding it to =H-i=. Though this won't work in the terminal
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'input-decode-map
   "C-i" "H-i")
  (general-define-key
   :states 'normal
   "H-i" 'evil-jump-forward)
#+END_SRC

We want to hybridize some usefull emacs commands with better evil keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'insert
   "C-y" 'yank
   "C-e" 'mwim-end-of-code-or-line
   "C-a" 'mwim-beginning-of-code-or-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ($leader-set-key
    "h" '(:ignore t :wk "help")
    "hd" '(:ignore t :wk "describe")
    "hdf" 'describe-function
    "hdv" 'describe-variable
    "hdk" 'describe-key
    "f" '(:ignore t :wk "files")
    "fa" 'save-buffer
    "bd" 'kill-buffer
    "br" 'rename-buffer)
#+END_SRC

I will need to fix this so that it won't use =[]= as a starter key.
#+BEGIN_SRC emacs-lisp
  (use-package evil-unimpaired
    :straight
    (evil-unimpaired
     :type git :host github :repo "CeleritasCelery/evil-unimpaired"
     :upstream (:host github
                      :repo "zmaas/evil-unimpaired"))
    :demand t
    :init
    (setq evil-unimpaired-leader-keys '("gk" . "gj"))
    :config
    (evil-unimpaired-mode))
#+END_SRC

we only want evil snipe for the ability to repeat =f,F,t,T=. I find
avy is better for the actual sniping
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :demand t
    :after evil
    :init
    (setq evil-snipe-override-evil-repeat-keys nil)
    :config
    (evil-snipe-override-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :demand t
    :config
    (global-vi-tilde-fringe-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :delight
    :demand t
    :init
    (setq evil-escape-unordered-key-sequence t
          evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :demand t
    :after evil
    :config
    (defun $unmap-leader (_m keymaps)
      (when keymaps
        (general-define-key
         :states 'normal
         :keymaps keymaps
         $leader-key nil
         $mm-leader-key nil)))
    (add-hook 'evil-collection-setup-hook '$unmap-leader)
    (evil-collection-init '(calc calendar custom debug eldoc elisp-mode dired help info occur wgrep wdired which-key)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :demand t
    :config
    (global-evil-surround-mode)
    (general-define-key
     :states 'visual
     :keymaps 'evil-surround-mode-map
     "s" 'evil-surround-region
     "S" 'evil-substitute))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :commands (evilnc-copy-and-comment-operator
               evilnc-comment-operator)
    :init
    ($leader-set-key
      "." '(evilnc-copy-and-comment-operator :wk "copy-and-comment")
      ";" '(evilnc-comment-operator :wk "comment")))
#+END_SRC

These packages are great at providing editor shortcuts for editing
lisp
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :delight
    :hook emacs-lisp-mode
    :init
    (setq lispy-colon-p nil))

  (use-package lispyville
    :delight
    :hook lispy-mode
    :init
    (setq lispyville-key-theme
          '(operators
            c-w
            slurp/barf-cp
            additional
            additional-movement
            additional-insert
            additional-wrap
            mark)))
#+END_SRC

** Helm
helm is the more powerfull of the two between itself and ivy. I really
want to give Ivy a good try because it seems snappier on large files,
but there are still some issues that gives helm the advantage
- =helm-ag= supports out of order matching
- helm doesn't break when using "regex" characters in pattern
- helm is integrated with dired.
- helm supports marking files
- helm file sorting is more sane
- helm-mini has better recentf functionality
- helm supports frames, which makes swoop easier
- =counsel-fzf= is broken, but =helm-fzf= works great
- helm supports marking, which is very efficent.

my biggest beef with helm is that when using tramp it very slow. I
will have to look into seeing what can be done about that. But the
code is so intimidating. But thankfully I only use tramp about once a
week to copy some files, so it is not a big deal.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :general
    (:keymaps 'helm-map
              "C-j" 'helm-next-line
              "C-k" 'helm-previous-line
              "C-h" 'helm-next-source
              "C-S-h" 'describe-key
              "C-l" "RET"
              "C-z" 'helm-select-action
              "TAB" 'helm-execute-persistent-action)
    (:keymaps '(helm-find-files-map
                helm-read-file-map)
              "C-l" 'helm-execute-persistent-action
              "C-h" 'helm-find-files-up-one-level))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package swoop)

  (use-package helm-ag)
#+END_SRC

** files
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init
    (setq avy-timeout-seconds 0.3)
    (general-define-key
     :states '(normal visual)
     ";" 'avy-goto-char-timer)
    :config
    (evil-collection-init 'avy))
#+END_SRC

** git
don't ask about following symlinks
#+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-git-executable
          "/usr/intel/pkgs/git/2.12.0/bin/git") ;; get around old magit git version problem
    ($leader-set-key
      "g" '(:ignore t :wk "git")
      "gs" 'magit-status))

  (use-package evil-magit
    :demand t
    :after magit)

  (use-package git-timemachine
    :init
    ($leader-set-key
      "gt" 'git-timemachine))

  (use-package git-gutter
    :diminish
    :demand t
    :init
    (setq git-gutter:diff-option "-w")
    :config
    (global-git-gutter-mode))
  (use-package git-gutter-fringe
    :demand t
    :after git-gutter)
#+END_SRC
* Languages
  :PROPERTIES:
  :VISIBILITY: children
  :END:

** General
#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company
    :general
    (:keymaps 'company-active-map
              "RET" nil
              [return] nil
              "C-l" 'company-complete-selection)
    :hook '(prog-mode org-mode)
    :init
    (setq company-idle-delay 0.2)
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init 'company))

  (use-package company-statistics
    :demand t
    :after company
    :init
    (setq company-statistics-file
          (expand-file-name "company-statistics-cache.el"
                            $cache-directory))
    :config
    (company-statistics-mode))

  (use-package company-shell)
#+END_SRC
** Org
I want to to get this more organized, but for now I will just put
basic org config here
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :gfhook org-indent-mode
    :init
    ($leader-local-set-key
      :keymaps 'org-mode-map
      "," 'org-edit-special))

  (defun $git-work-user ()
    "Set my work credentials"
    (interactive)
    (shell-command "git config --local user.name \"Hinckley, Troy J\" &&
   git config --local user.email troy.j.hinckley@intel.com"))

  (defun $git-private-user ()
    "Set my work credentials"
    (interactive)
    (shell-command "git config --local user.name CeleritasCelery &&
   git config --local user.email t.macman@gmail.com"))

  (use-package org-src
    :straight nil
    :init
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t)
    :config
    ($leader-local-set-key
      :definer 'minor-mode
      :keymaps 'org-src-mode
      "," 'org-edit-src-exit)
    (defun $suppress-delete-other-windows (orig-fn &rest args)
      (cl-letf (((symbol-function 'delete-other-windows)
                 (symbol-function 'ignore)))
        (apply orig-fn args)))
    (advice-add #'org-edit-src-code :around #'$suppress-delete-other-windows))
#+END_SRC

** elisp

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :hook emacs-lisp-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "tramp"
    (setq tramp-default-method "ssh")
    (setq tramp-default-user "tjhinckl")
    ;; set TRAMP verbosity to warnings and errors only. default is level 3 which
    ;; sends a message every time we connect to a remote host
    (setq tramp-verbose 4)
    (setq helm-tramp-connection-min-time-diff 1)

    ;; https://emacs.stackexchange.com/questions/29286/tramp-unable-to-open-some-files
    (setq tramp-inline-compress-start-size 1000000)
    (setq tramp-copy-size-limit 1000000)
    (tramp-set-completion-function "ssh" '((tramp-parse-hosts "~/.ssh2/ssh2_config"))))
#+END_SRC

** perl
#+BEGIN_SRC emacs-lisp
  (use-package perl
    :straight nil
    :init
    (setq flycheck-perl-executable "/usr/intel/pkgs/perl/5.14.1/bin/perl")
    (setq flycheck-perl-perlcritic-executable "/usr/intel/pkgs/perl/5.14.1-threads/bin/perlcritic")
    (setq flycheck-perl-include-path '("/p/hdk/cad/spf/latest/lib/perl5" ;; SPF library
                                       "../lib/perl5" ;; DTEG ultiscan
                                       "../../lib/perl5" ;; DTEG STF
                                       "..")) ;; library files need to see the library ¯\_(ツ)_/¯
    (setenv "SPF_ROOT" "/p/hdk/cad/spf/latest")
    (setenv "VALID_ROOT" "/p/hdk/rtl/valid/shdk74")
    (setenv "VTLIB" "/p/hdk/rtl/valid/shdk74/lib")
    (setenv "SPF_PERL_LIB" "/p/hdk/cad/spf/latest/lib/perl5")
    (setenv "GLOBAL_TOOLS" "/nfs/site/proj/dpg/tools")
    (setenv "XWEAVE_REPO_ROOT" "/p/hdk/rtl/ip_releases/shdk74/xweave/v17ww43a")
    (setenv "IDS_HOME" "/p/hdk/rtl/cad/x86-64_linux26/dteg/ideas_shell/0.15.1")

    ;; ISC required variables
    (setenv "RTL_CAD_ROOT" "/p/hdk/rtl/cad/x86-64_linux26")
    (setenv "RTL_PROJ_CFG" "/p/hdk/rtl/proj_tools/proj_cfg")
    (setenv "CFG_PROJECT" "shdk74")
    (setenv "RTL_PROJ_BIN" "/p/hdk/rtl/proj_tools/proj_binx/shdk74/latest")
    (setenv "RTL_PROJ_TOOLS" "/p/hdk/rtl/proj_tools"))
#+END_SRC
